
bracomecanino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d8c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002e4c  08002e4c  00012e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002ec0  08002ec0  00012ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002ec4  08002ec4  00012ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08002ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000190  20000004  08002ecc  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000194  08002ecc  00020194  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e306  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c5c  00000000  00000000  0002e332  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a58  00000000  00000000  0002ff90  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000990  00000000  00000000  000309e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000049a0  00000000  00000000  00031378  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000031b7  00000000  00000000  00035d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00038ecf  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000024c0  00000000  00000000  00038f4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e34 	.word	0x08002e34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002e34 	.word	0x08002e34

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	4a07      	ldr	r2, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000228:	6812      	ldr	r2, [r2, #0]
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f002 fbcb 	bl	80029d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f000 fed4 	bl	8000ffc <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f8e8 	bl	8000438 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8cb 	bl	800040c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000020 	.word	0x20000020

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000020 	.word	0x20000020

080002ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b4:	f7ff fff0 	bl	8000298 <HAL_GetTick>
 80002b8:	0003      	movs	r3, r0
 80002ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	d002      	beq.n	80002cc <HAL_Delay+0x20>
  {
     wait++;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	f7ff ffe3 	bl	8000298 <HAL_GetTick>
 80002d2:	0002      	movs	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad2      	subs	r2, r2, r3
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d3f7      	bcc.n	80002ce <HAL_Delay+0x22>
  {
  }
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b004      	add	sp, #16
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e8:	b5b0      	push	{r4, r5, r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	0002      	movs	r2, r0
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b7f      	cmp	r3, #127	; 0x7f
 80002fc:	d932      	bls.n	8000364 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fe:	4c2f      	ldr	r4, [pc, #188]	; (80003bc <NVIC_SetPriority+0xd4>)
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	001a      	movs	r2, r3
 8000306:	230f      	movs	r3, #15
 8000308:	4013      	ands	r3, r2
 800030a:	3b08      	subs	r3, #8
 800030c:	0899      	lsrs	r1, r3, #2
 800030e:	4a2b      	ldr	r2, [pc, #172]	; (80003bc <NVIC_SetPriority+0xd4>)
 8000310:	1dfb      	adds	r3, r7, #7
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	0018      	movs	r0, r3
 8000316:	230f      	movs	r3, #15
 8000318:	4003      	ands	r3, r0
 800031a:	3b08      	subs	r3, #8
 800031c:	089b      	lsrs	r3, r3, #2
 800031e:	3306      	adds	r3, #6
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	18d3      	adds	r3, r2, r3
 8000324:	3304      	adds	r3, #4
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	1dfa      	adds	r2, r7, #7
 800032a:	7812      	ldrb	r2, [r2, #0]
 800032c:	0010      	movs	r0, r2
 800032e:	2203      	movs	r2, #3
 8000330:	4002      	ands	r2, r0
 8000332:	00d2      	lsls	r2, r2, #3
 8000334:	20ff      	movs	r0, #255	; 0xff
 8000336:	4090      	lsls	r0, r2
 8000338:	0002      	movs	r2, r0
 800033a:	43d2      	mvns	r2, r2
 800033c:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	019b      	lsls	r3, r3, #6
 8000342:	20ff      	movs	r0, #255	; 0xff
 8000344:	4018      	ands	r0, r3
 8000346:	1dfb      	adds	r3, r7, #7
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	001d      	movs	r5, r3
 800034c:	2303      	movs	r3, #3
 800034e:	402b      	ands	r3, r5
 8000350:	00db      	lsls	r3, r3, #3
 8000352:	4098      	lsls	r0, r3
 8000354:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000356:	431a      	orrs	r2, r3
 8000358:	1d8b      	adds	r3, r1, #6
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	18e3      	adds	r3, r4, r3
 800035e:	3304      	adds	r3, #4
 8000360:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000362:	e027      	b.n	80003b4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000364:	4c16      	ldr	r4, [pc, #88]	; (80003c0 <NVIC_SetPriority+0xd8>)
 8000366:	1dfb      	adds	r3, r7, #7
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	b25b      	sxtb	r3, r3
 800036c:	089b      	lsrs	r3, r3, #2
 800036e:	4914      	ldr	r1, [pc, #80]	; (80003c0 <NVIC_SetPriority+0xd8>)
 8000370:	1dfa      	adds	r2, r7, #7
 8000372:	7812      	ldrb	r2, [r2, #0]
 8000374:	b252      	sxtb	r2, r2
 8000376:	0892      	lsrs	r2, r2, #2
 8000378:	32c0      	adds	r2, #192	; 0xc0
 800037a:	0092      	lsls	r2, r2, #2
 800037c:	5852      	ldr	r2, [r2, r1]
 800037e:	1df9      	adds	r1, r7, #7
 8000380:	7809      	ldrb	r1, [r1, #0]
 8000382:	0008      	movs	r0, r1
 8000384:	2103      	movs	r1, #3
 8000386:	4001      	ands	r1, r0
 8000388:	00c9      	lsls	r1, r1, #3
 800038a:	20ff      	movs	r0, #255	; 0xff
 800038c:	4088      	lsls	r0, r1
 800038e:	0001      	movs	r1, r0
 8000390:	43c9      	mvns	r1, r1
 8000392:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000394:	683a      	ldr	r2, [r7, #0]
 8000396:	0192      	lsls	r2, r2, #6
 8000398:	20ff      	movs	r0, #255	; 0xff
 800039a:	4010      	ands	r0, r2
 800039c:	1dfa      	adds	r2, r7, #7
 800039e:	7812      	ldrb	r2, [r2, #0]
 80003a0:	0015      	movs	r5, r2
 80003a2:	2203      	movs	r2, #3
 80003a4:	402a      	ands	r2, r5
 80003a6:	00d2      	lsls	r2, r2, #3
 80003a8:	4090      	lsls	r0, r2
 80003aa:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003ac:	430a      	orrs	r2, r1
 80003ae:	33c0      	adds	r3, #192	; 0xc0
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	511a      	str	r2, [r3, r4]
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b002      	add	sp, #8
 80003ba:	bdb0      	pop	{r4, r5, r7, pc}
 80003bc:	e000ed00 	.word	0xe000ed00
 80003c0:	e000e100 	.word	0xe000e100

080003c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	4a0c      	ldr	r2, [pc, #48]	; (8000404 <SysTick_Config+0x40>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d901      	bls.n	80003da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003d6:	2301      	movs	r3, #1
 80003d8:	e010      	b.n	80003fc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <SysTick_Config+0x44>)
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	3a01      	subs	r2, #1
 80003e0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003e2:	2301      	movs	r3, #1
 80003e4:	425b      	negs	r3, r3
 80003e6:	2103      	movs	r1, #3
 80003e8:	0018      	movs	r0, r3
 80003ea:	f7ff ff7d 	bl	80002e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <SysTick_Config+0x44>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f4:	4b04      	ldr	r3, [pc, #16]	; (8000408 <SysTick_Config+0x44>)
 80003f6:	2207      	movs	r2, #7
 80003f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003fa:	2300      	movs	r3, #0
}
 80003fc:	0018      	movs	r0, r3
 80003fe:	46bd      	mov	sp, r7
 8000400:	b002      	add	sp, #8
 8000402:	bd80      	pop	{r7, pc}
 8000404:	00ffffff 	.word	0x00ffffff
 8000408:	e000e010 	.word	0xe000e010

0800040c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	60b9      	str	r1, [r7, #8]
 8000414:	607a      	str	r2, [r7, #4]
 8000416:	230f      	movs	r3, #15
 8000418:	18fb      	adds	r3, r7, r3
 800041a:	1c02      	adds	r2, r0, #0
 800041c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800041e:	68ba      	ldr	r2, [r7, #8]
 8000420:	230f      	movs	r3, #15
 8000422:	18fb      	adds	r3, r7, r3
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	b25b      	sxtb	r3, r3
 8000428:	0011      	movs	r1, r2
 800042a:	0018      	movs	r0, r3
 800042c:	f7ff ff5c 	bl	80002e8 <NVIC_SetPriority>
}
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	b004      	add	sp, #16
 8000436:	bd80      	pop	{r7, pc}

08000438 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	0018      	movs	r0, r3
 8000444:	f7ff ffbe 	bl	80003c4 <SysTick_Config>
 8000448:	0003      	movs	r3, r0
}
 800044a:	0018      	movs	r0, r3
 800044c:	46bd      	mov	sp, r7
 800044e:	b002      	add	sp, #8
 8000450:	bd80      	pop	{r7, pc}
	...

08000454 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2b04      	cmp	r3, #4
 8000460:	d106      	bne.n	8000470 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000464:	4a07      	ldr	r2, [pc, #28]	; (8000484 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000466:	6812      	ldr	r2, [r2, #0]
 8000468:	2104      	movs	r1, #4
 800046a:	430a      	orrs	r2, r1
 800046c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800046e:	e005      	b.n	800047c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000470:	4b04      	ldr	r3, [pc, #16]	; (8000484 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000472:	4a04      	ldr	r2, [pc, #16]	; (8000484 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000474:	6812      	ldr	r2, [r2, #0]
 8000476:	2104      	movs	r1, #4
 8000478:	438a      	bics	r2, r1
 800047a:	601a      	str	r2, [r3, #0]
}
 800047c:	46c0      	nop			; (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	b002      	add	sp, #8
 8000482:	bd80      	pop	{r7, pc}
 8000484:	e000e010 	.word	0xe000e010

08000488 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800048c:	f000 f803 	bl	8000496 <HAL_SYSTICK_Callback>
}
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80004b2:	2300      	movs	r3, #0
 80004b4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004b6:	e14f      	b.n	8000758 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2101      	movs	r1, #1
 80004be:	697a      	ldr	r2, [r7, #20]
 80004c0:	4091      	lsls	r1, r2
 80004c2:	000a      	movs	r2, r1
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d100      	bne.n	80004d0 <HAL_GPIO_Init+0x30>
 80004ce:	e140      	b.n	8000752 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	2b02      	cmp	r3, #2
 80004d6:	d003      	beq.n	80004e0 <HAL_GPIO_Init+0x40>
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	2b12      	cmp	r3, #18
 80004de:	d123      	bne.n	8000528 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	08da      	lsrs	r2, r3, #3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	3208      	adds	r2, #8
 80004e8:	0092      	lsls	r2, r2, #2
 80004ea:	58d3      	ldr	r3, [r2, r3]
 80004ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	2207      	movs	r2, #7
 80004f2:	4013      	ands	r3, r2
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	220f      	movs	r2, #15
 80004f8:	409a      	lsls	r2, r3
 80004fa:	0013      	movs	r3, r2
 80004fc:	43da      	mvns	r2, r3
 80004fe:	693b      	ldr	r3, [r7, #16]
 8000500:	4013      	ands	r3, r2
 8000502:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	691a      	ldr	r2, [r3, #16]
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	2107      	movs	r1, #7
 800050c:	400b      	ands	r3, r1
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	409a      	lsls	r2, r3
 8000512:	0013      	movs	r3, r2
 8000514:	693a      	ldr	r2, [r7, #16]
 8000516:	4313      	orrs	r3, r2
 8000518:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	08da      	lsrs	r2, r3, #3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	3208      	adds	r2, #8
 8000522:	0092      	lsls	r2, r2, #2
 8000524:	6939      	ldr	r1, [r7, #16]
 8000526:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	2203      	movs	r2, #3
 8000534:	409a      	lsls	r2, r3
 8000536:	0013      	movs	r3, r2
 8000538:	43da      	mvns	r2, r3
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	4013      	ands	r3, r2
 800053e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	2203      	movs	r2, #3
 8000546:	401a      	ands	r2, r3
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	409a      	lsls	r2, r3
 800054e:	0013      	movs	r3, r2
 8000550:	693a      	ldr	r2, [r7, #16]
 8000552:	4313      	orrs	r3, r2
 8000554:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	693a      	ldr	r2, [r7, #16]
 800055a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d00b      	beq.n	800057c <HAL_GPIO_Init+0xdc>
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d007      	beq.n	800057c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000570:	2b11      	cmp	r3, #17
 8000572:	d003      	beq.n	800057c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	2b12      	cmp	r3, #18
 800057a:	d130      	bne.n	80005de <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	2203      	movs	r2, #3
 8000588:	409a      	lsls	r2, r3
 800058a:	0013      	movs	r3, r2
 800058c:	43da      	mvns	r2, r3
 800058e:	693b      	ldr	r3, [r7, #16]
 8000590:	4013      	ands	r3, r2
 8000592:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	68da      	ldr	r2, [r3, #12]
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	409a      	lsls	r2, r3
 800059e:	0013      	movs	r3, r2
 80005a0:	693a      	ldr	r2, [r7, #16]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	693a      	ldr	r2, [r7, #16]
 80005aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80005b2:	2201      	movs	r2, #1
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	409a      	lsls	r2, r3
 80005b8:	0013      	movs	r3, r2
 80005ba:	43da      	mvns	r2, r3
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	4013      	ands	r3, r2
 80005c0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	091b      	lsrs	r3, r3, #4
 80005c8:	2201      	movs	r2, #1
 80005ca:	401a      	ands	r2, r3
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	409a      	lsls	r2, r3
 80005d0:	0013      	movs	r3, r2
 80005d2:	693a      	ldr	r2, [r7, #16]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	693a      	ldr	r2, [r7, #16]
 80005dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	2203      	movs	r2, #3
 80005ea:	409a      	lsls	r2, r3
 80005ec:	0013      	movs	r3, r2
 80005ee:	43da      	mvns	r2, r3
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	4013      	ands	r3, r2
 80005f4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	689a      	ldr	r2, [r3, #8]
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	409a      	lsls	r2, r3
 8000600:	0013      	movs	r3, r2
 8000602:	693a      	ldr	r2, [r7, #16]
 8000604:	4313      	orrs	r3, r2
 8000606:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	685a      	ldr	r2, [r3, #4]
 8000612:	2380      	movs	r3, #128	; 0x80
 8000614:	055b      	lsls	r3, r3, #21
 8000616:	4013      	ands	r3, r2
 8000618:	d100      	bne.n	800061c <HAL_GPIO_Init+0x17c>
 800061a:	e09a      	b.n	8000752 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061c:	4b54      	ldr	r3, [pc, #336]	; (8000770 <HAL_GPIO_Init+0x2d0>)
 800061e:	4a54      	ldr	r2, [pc, #336]	; (8000770 <HAL_GPIO_Init+0x2d0>)
 8000620:	6992      	ldr	r2, [r2, #24]
 8000622:	2101      	movs	r1, #1
 8000624:	430a      	orrs	r2, r1
 8000626:	619a      	str	r2, [r3, #24]
 8000628:	4b51      	ldr	r3, [pc, #324]	; (8000770 <HAL_GPIO_Init+0x2d0>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	2201      	movs	r2, #1
 800062e:	4013      	ands	r3, r2
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000634:	4a4f      	ldr	r2, [pc, #316]	; (8000774 <HAL_GPIO_Init+0x2d4>)
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	089b      	lsrs	r3, r3, #2
 800063a:	3302      	adds	r3, #2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	589b      	ldr	r3, [r3, r2]
 8000640:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	2203      	movs	r2, #3
 8000646:	4013      	ands	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	220f      	movs	r2, #15
 800064c:	409a      	lsls	r2, r3
 800064e:	0013      	movs	r3, r2
 8000650:	43da      	mvns	r2, r3
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	4013      	ands	r3, r2
 8000656:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	2390      	movs	r3, #144	; 0x90
 800065c:	05db      	lsls	r3, r3, #23
 800065e:	429a      	cmp	r2, r3
 8000660:	d013      	beq.n	800068a <HAL_GPIO_Init+0x1ea>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a44      	ldr	r2, [pc, #272]	; (8000778 <HAL_GPIO_Init+0x2d8>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d00d      	beq.n	8000686 <HAL_GPIO_Init+0x1e6>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a43      	ldr	r2, [pc, #268]	; (800077c <HAL_GPIO_Init+0x2dc>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d007      	beq.n	8000682 <HAL_GPIO_Init+0x1e2>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a42      	ldr	r2, [pc, #264]	; (8000780 <HAL_GPIO_Init+0x2e0>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d101      	bne.n	800067e <HAL_GPIO_Init+0x1de>
 800067a:	2303      	movs	r3, #3
 800067c:	e006      	b.n	800068c <HAL_GPIO_Init+0x1ec>
 800067e:	2305      	movs	r3, #5
 8000680:	e004      	b.n	800068c <HAL_GPIO_Init+0x1ec>
 8000682:	2302      	movs	r3, #2
 8000684:	e002      	b.n	800068c <HAL_GPIO_Init+0x1ec>
 8000686:	2301      	movs	r3, #1
 8000688:	e000      	b.n	800068c <HAL_GPIO_Init+0x1ec>
 800068a:	2300      	movs	r3, #0
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	2103      	movs	r1, #3
 8000690:	400a      	ands	r2, r1
 8000692:	0092      	lsls	r2, r2, #2
 8000694:	4093      	lsls	r3, r2
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	4313      	orrs	r3, r2
 800069a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800069c:	4935      	ldr	r1, [pc, #212]	; (8000774 <HAL_GPIO_Init+0x2d4>)
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	089b      	lsrs	r3, r3, #2
 80006a2:	3302      	adds	r3, #2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	693a      	ldr	r2, [r7, #16]
 80006a8:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006aa:	4b36      	ldr	r3, [pc, #216]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	43da      	mvns	r2, r3
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	4013      	ands	r3, r2
 80006b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	025b      	lsls	r3, r3, #9
 80006c2:	4013      	ands	r3, r2
 80006c4:	d003      	beq.n	80006ce <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80006d4:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	43da      	mvns	r2, r3
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	4013      	ands	r3, r2
 80006e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	029b      	lsls	r3, r3, #10
 80006ec:	4013      	ands	r3, r2
 80006ee:	d003      	beq.n	80006f8 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 80006f0:	693a      	ldr	r2, [r7, #16]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	43da      	mvns	r2, r3
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	4013      	ands	r3, r2
 800070c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	035b      	lsls	r3, r3, #13
 8000716:	4013      	ands	r3, r2
 8000718:	d003      	beq.n	8000722 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4313      	orrs	r3, r2
 8000720:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 8000724:	693a      	ldr	r2, [r7, #16]
 8000726:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	43da      	mvns	r2, r3
 8000732:	693b      	ldr	r3, [r7, #16]
 8000734:	4013      	ands	r3, r2
 8000736:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	685a      	ldr	r2, [r3, #4]
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	039b      	lsls	r3, r3, #14
 8000740:	4013      	ands	r3, r2
 8000742:	d003      	beq.n	800074c <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8000744:	693a      	ldr	r2, [r7, #16]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4313      	orrs	r3, r2
 800074a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	3301      	adds	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	40da      	lsrs	r2, r3
 8000760:	1e13      	subs	r3, r2, #0
 8000762:	d000      	beq.n	8000766 <HAL_GPIO_Init+0x2c6>
 8000764:	e6a8      	b.n	80004b8 <HAL_GPIO_Init+0x18>
  } 
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b006      	add	sp, #24
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	40021000 	.word	0x40021000
 8000774:	40010000 	.word	0x40010000
 8000778:	48000400 	.word	0x48000400
 800077c:	48000800 	.word	0x48000800
 8000780:	48000c00 	.word	0x48000c00
 8000784:	40010400 	.word	0x40010400

08000788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2201      	movs	r2, #1
 800079a:	4013      	ands	r3, r2
 800079c:	d100      	bne.n	80007a0 <HAL_RCC_OscConfig+0x18>
 800079e:	e08d      	b.n	80008bc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007a0:	4bc3      	ldr	r3, [pc, #780]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	220c      	movs	r2, #12
 80007a6:	4013      	ands	r3, r2
 80007a8:	2b04      	cmp	r3, #4
 80007aa:	d00e      	beq.n	80007ca <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007ac:	4bc0      	ldr	r3, [pc, #768]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	220c      	movs	r2, #12
 80007b2:	4013      	ands	r3, r2
 80007b4:	2b08      	cmp	r3, #8
 80007b6:	d116      	bne.n	80007e6 <HAL_RCC_OscConfig+0x5e>
 80007b8:	4bbd      	ldr	r3, [pc, #756]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 80007ba:	685a      	ldr	r2, [r3, #4]
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	025b      	lsls	r3, r3, #9
 80007c0:	401a      	ands	r2, r3
 80007c2:	2380      	movs	r3, #128	; 0x80
 80007c4:	025b      	lsls	r3, r3, #9
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d10d      	bne.n	80007e6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007ca:	4bb9      	ldr	r3, [pc, #740]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	2380      	movs	r3, #128	; 0x80
 80007d0:	029b      	lsls	r3, r3, #10
 80007d2:	4013      	ands	r3, r2
 80007d4:	d100      	bne.n	80007d8 <HAL_RCC_OscConfig+0x50>
 80007d6:	e070      	b.n	80008ba <HAL_RCC_OscConfig+0x132>
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d000      	beq.n	80007e2 <HAL_RCC_OscConfig+0x5a>
 80007e0:	e06b      	b.n	80008ba <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e2b5      	b.n	8000d52 <HAL_RCC_OscConfig+0x5ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d107      	bne.n	80007fe <HAL_RCC_OscConfig+0x76>
 80007ee:	4bb0      	ldr	r3, [pc, #704]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 80007f0:	4aaf      	ldr	r2, [pc, #700]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 80007f2:	6812      	ldr	r2, [r2, #0]
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	0249      	lsls	r1, r1, #9
 80007f8:	430a      	orrs	r2, r1
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	e02f      	b.n	800085e <HAL_RCC_OscConfig+0xd6>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d10c      	bne.n	8000820 <HAL_RCC_OscConfig+0x98>
 8000806:	4baa      	ldr	r3, [pc, #680]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000808:	4aa9      	ldr	r2, [pc, #676]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 800080a:	6812      	ldr	r2, [r2, #0]
 800080c:	49a9      	ldr	r1, [pc, #676]	; (8000ab4 <HAL_RCC_OscConfig+0x32c>)
 800080e:	400a      	ands	r2, r1
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	4ba7      	ldr	r3, [pc, #668]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000814:	4aa6      	ldr	r2, [pc, #664]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000816:	6812      	ldr	r2, [r2, #0]
 8000818:	49a7      	ldr	r1, [pc, #668]	; (8000ab8 <HAL_RCC_OscConfig+0x330>)
 800081a:	400a      	ands	r2, r1
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	e01e      	b.n	800085e <HAL_RCC_OscConfig+0xd6>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	2b05      	cmp	r3, #5
 8000826:	d10e      	bne.n	8000846 <HAL_RCC_OscConfig+0xbe>
 8000828:	4ba1      	ldr	r3, [pc, #644]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 800082a:	4aa1      	ldr	r2, [pc, #644]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 800082c:	6812      	ldr	r2, [r2, #0]
 800082e:	2180      	movs	r1, #128	; 0x80
 8000830:	02c9      	lsls	r1, r1, #11
 8000832:	430a      	orrs	r2, r1
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	4b9e      	ldr	r3, [pc, #632]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000838:	4a9d      	ldr	r2, [pc, #628]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 800083a:	6812      	ldr	r2, [r2, #0]
 800083c:	2180      	movs	r1, #128	; 0x80
 800083e:	0249      	lsls	r1, r1, #9
 8000840:	430a      	orrs	r2, r1
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	e00b      	b.n	800085e <HAL_RCC_OscConfig+0xd6>
 8000846:	4b9a      	ldr	r3, [pc, #616]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000848:	4a99      	ldr	r2, [pc, #612]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 800084a:	6812      	ldr	r2, [r2, #0]
 800084c:	4999      	ldr	r1, [pc, #612]	; (8000ab4 <HAL_RCC_OscConfig+0x32c>)
 800084e:	400a      	ands	r2, r1
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	4b97      	ldr	r3, [pc, #604]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000854:	4a96      	ldr	r2, [pc, #600]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000856:	6812      	ldr	r2, [r2, #0]
 8000858:	4997      	ldr	r1, [pc, #604]	; (8000ab8 <HAL_RCC_OscConfig+0x330>)
 800085a:	400a      	ands	r2, r1
 800085c:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d014      	beq.n	8000890 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000866:	f7ff fd17 	bl	8000298 <HAL_GetTick>
 800086a:	0003      	movs	r3, r0
 800086c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800086e:	e008      	b.n	8000882 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000870:	f7ff fd12 	bl	8000298 <HAL_GetTick>
 8000874:	0002      	movs	r2, r0
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	2b64      	cmp	r3, #100	; 0x64
 800087c:	d901      	bls.n	8000882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800087e:	2303      	movs	r3, #3
 8000880:	e267      	b.n	8000d52 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000882:	4b8b      	ldr	r3, [pc, #556]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	029b      	lsls	r3, r3, #10
 800088a:	4013      	ands	r3, r2
 800088c:	d0f0      	beq.n	8000870 <HAL_RCC_OscConfig+0xe8>
 800088e:	e015      	b.n	80008bc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000890:	f7ff fd02 	bl	8000298 <HAL_GetTick>
 8000894:	0003      	movs	r3, r0
 8000896:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000898:	e008      	b.n	80008ac <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800089a:	f7ff fcfd 	bl	8000298 <HAL_GetTick>
 800089e:	0002      	movs	r2, r0
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	2b64      	cmp	r3, #100	; 0x64
 80008a6:	d901      	bls.n	80008ac <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80008a8:	2303      	movs	r3, #3
 80008aa:	e252      	b.n	8000d52 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008ac:	4b80      	ldr	r3, [pc, #512]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	029b      	lsls	r3, r3, #10
 80008b4:	4013      	ands	r3, r2
 80008b6:	d1f0      	bne.n	800089a <HAL_RCC_OscConfig+0x112>
 80008b8:	e000      	b.n	80008bc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008ba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2202      	movs	r2, #2
 80008c2:	4013      	ands	r3, r2
 80008c4:	d100      	bne.n	80008c8 <HAL_RCC_OscConfig+0x140>
 80008c6:	e069      	b.n	800099c <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008c8:	4b79      	ldr	r3, [pc, #484]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	220c      	movs	r2, #12
 80008ce:	4013      	ands	r3, r2
 80008d0:	d00b      	beq.n	80008ea <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80008d2:	4b77      	ldr	r3, [pc, #476]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	220c      	movs	r2, #12
 80008d8:	4013      	ands	r3, r2
 80008da:	2b08      	cmp	r3, #8
 80008dc:	d11c      	bne.n	8000918 <HAL_RCC_OscConfig+0x190>
 80008de:	4b74      	ldr	r3, [pc, #464]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 80008e0:	685a      	ldr	r2, [r3, #4]
 80008e2:	2380      	movs	r3, #128	; 0x80
 80008e4:	025b      	lsls	r3, r3, #9
 80008e6:	4013      	ands	r3, r2
 80008e8:	d116      	bne.n	8000918 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008ea:	4b71      	ldr	r3, [pc, #452]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2202      	movs	r2, #2
 80008f0:	4013      	ands	r3, r2
 80008f2:	d005      	beq.n	8000900 <HAL_RCC_OscConfig+0x178>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d001      	beq.n	8000900 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 80008fc:	2301      	movs	r3, #1
 80008fe:	e228      	b.n	8000d52 <HAL_RCC_OscConfig+0x5ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000900:	4a6b      	ldr	r2, [pc, #428]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000902:	4b6b      	ldr	r3, [pc, #428]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	21f8      	movs	r1, #248	; 0xf8
 8000908:	438b      	bics	r3, r1
 800090a:	0019      	movs	r1, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	691b      	ldr	r3, [r3, #16]
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	430b      	orrs	r3, r1
 8000914:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000916:	e041      	b.n	800099c <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d024      	beq.n	800096a <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000920:	4b63      	ldr	r3, [pc, #396]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000922:	4a63      	ldr	r2, [pc, #396]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000924:	6812      	ldr	r2, [r2, #0]
 8000926:	2101      	movs	r1, #1
 8000928:	430a      	orrs	r2, r1
 800092a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800092c:	f7ff fcb4 	bl	8000298 <HAL_GetTick>
 8000930:	0003      	movs	r3, r0
 8000932:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000934:	e008      	b.n	8000948 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000936:	f7ff fcaf 	bl	8000298 <HAL_GetTick>
 800093a:	0002      	movs	r2, r0
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	2b02      	cmp	r3, #2
 8000942:	d901      	bls.n	8000948 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8000944:	2303      	movs	r3, #3
 8000946:	e204      	b.n	8000d52 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000948:	4b59      	ldr	r3, [pc, #356]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2202      	movs	r2, #2
 800094e:	4013      	ands	r3, r2
 8000950:	d0f1      	beq.n	8000936 <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000952:	4a57      	ldr	r2, [pc, #348]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000954:	4b56      	ldr	r3, [pc, #344]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	21f8      	movs	r1, #248	; 0xf8
 800095a:	438b      	bics	r3, r1
 800095c:	0019      	movs	r1, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	691b      	ldr	r3, [r3, #16]
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	430b      	orrs	r3, r1
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	e018      	b.n	800099c <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800096a:	4b51      	ldr	r3, [pc, #324]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 800096c:	4a50      	ldr	r2, [pc, #320]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 800096e:	6812      	ldr	r2, [r2, #0]
 8000970:	2101      	movs	r1, #1
 8000972:	438a      	bics	r2, r1
 8000974:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000976:	f7ff fc8f 	bl	8000298 <HAL_GetTick>
 800097a:	0003      	movs	r3, r0
 800097c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800097e:	e008      	b.n	8000992 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000980:	f7ff fc8a 	bl	8000298 <HAL_GetTick>
 8000984:	0002      	movs	r2, r0
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	2b02      	cmp	r3, #2
 800098c:	d901      	bls.n	8000992 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800098e:	2303      	movs	r3, #3
 8000990:	e1df      	b.n	8000d52 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000992:	4b47      	ldr	r3, [pc, #284]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2202      	movs	r2, #2
 8000998:	4013      	ands	r3, r2
 800099a:	d1f1      	bne.n	8000980 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2208      	movs	r2, #8
 80009a2:	4013      	ands	r3, r2
 80009a4:	d036      	beq.n	8000a14 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d019      	beq.n	80009e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009ae:	4b40      	ldr	r3, [pc, #256]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 80009b0:	4a3f      	ldr	r2, [pc, #252]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 80009b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80009b4:	2101      	movs	r1, #1
 80009b6:	430a      	orrs	r2, r1
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009ba:	f7ff fc6d 	bl	8000298 <HAL_GetTick>
 80009be:	0003      	movs	r3, r0
 80009c0:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009c2:	e008      	b.n	80009d6 <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009c4:	f7ff fc68 	bl	8000298 <HAL_GetTick>
 80009c8:	0002      	movs	r2, r0
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d901      	bls.n	80009d6 <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 80009d2:	2303      	movs	r3, #3
 80009d4:	e1bd      	b.n	8000d52 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009d6:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 80009d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009da:	2202      	movs	r2, #2
 80009dc:	4013      	ands	r3, r2
 80009de:	d0f1      	beq.n	80009c4 <HAL_RCC_OscConfig+0x23c>
 80009e0:	e018      	b.n	8000a14 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009e2:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 80009e4:	4a32      	ldr	r2, [pc, #200]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 80009e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80009e8:	2101      	movs	r1, #1
 80009ea:	438a      	bics	r2, r1
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009ee:	f7ff fc53 	bl	8000298 <HAL_GetTick>
 80009f2:	0003      	movs	r3, r0
 80009f4:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009f6:	e008      	b.n	8000a0a <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009f8:	f7ff fc4e 	bl	8000298 <HAL_GetTick>
 80009fc:	0002      	movs	r2, r0
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d901      	bls.n	8000a0a <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8000a06:	2303      	movs	r3, #3
 8000a08:	e1a3      	b.n	8000d52 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a0a:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a0e:	2202      	movs	r2, #2
 8000a10:	4013      	ands	r3, r2
 8000a12:	d1f1      	bne.n	80009f8 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2204      	movs	r2, #4
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	d100      	bne.n	8000a20 <HAL_RCC_OscConfig+0x298>
 8000a1e:	e0b5      	b.n	8000b8c <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a20:	2317      	movs	r3, #23
 8000a22:	18fb      	adds	r3, r7, r3
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a28:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000a2a:	69da      	ldr	r2, [r3, #28]
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	055b      	lsls	r3, r3, #21
 8000a30:	4013      	ands	r3, r2
 8000a32:	d111      	bne.n	8000a58 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a34:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000a36:	4a1e      	ldr	r2, [pc, #120]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000a38:	69d2      	ldr	r2, [r2, #28]
 8000a3a:	2180      	movs	r1, #128	; 0x80
 8000a3c:	0549      	lsls	r1, r1, #21
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	61da      	str	r2, [r3, #28]
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000a44:	69da      	ldr	r2, [r3, #28]
 8000a46:	2380      	movs	r3, #128	; 0x80
 8000a48:	055b      	lsls	r3, r3, #21
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000a50:	2317      	movs	r3, #23
 8000a52:	18fb      	adds	r3, r7, r3
 8000a54:	2201      	movs	r2, #1
 8000a56:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_RCC_OscConfig+0x334>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	4013      	ands	r3, r2
 8000a62:	d11a      	bne.n	8000a9a <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_RCC_OscConfig+0x334>)
 8000a66:	4a15      	ldr	r2, [pc, #84]	; (8000abc <HAL_RCC_OscConfig+0x334>)
 8000a68:	6812      	ldr	r2, [r2, #0]
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	0049      	lsls	r1, r1, #1
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a72:	f7ff fc11 	bl	8000298 <HAL_GetTick>
 8000a76:	0003      	movs	r3, r0
 8000a78:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a7a:	e008      	b.n	8000a8e <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a7c:	f7ff fc0c 	bl	8000298 <HAL_GetTick>
 8000a80:	0002      	movs	r2, r0
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	2b64      	cmp	r3, #100	; 0x64
 8000a88:	d901      	bls.n	8000a8e <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	e161      	b.n	8000d52 <HAL_RCC_OscConfig+0x5ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_RCC_OscConfig+0x334>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	2380      	movs	r3, #128	; 0x80
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	4013      	ands	r3, r2
 8000a98:	d0f0      	beq.n	8000a7c <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d10e      	bne.n	8000ac0 <HAL_RCC_OscConfig+0x338>
 8000aa2:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000aa4:	4a02      	ldr	r2, [pc, #8]	; (8000ab0 <HAL_RCC_OscConfig+0x328>)
 8000aa6:	6a12      	ldr	r2, [r2, #32]
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	621a      	str	r2, [r3, #32]
 8000aae:	e035      	b.n	8000b1c <HAL_RCC_OscConfig+0x394>
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	fffeffff 	.word	0xfffeffff
 8000ab8:	fffbffff 	.word	0xfffbffff
 8000abc:	40007000 	.word	0x40007000
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d10c      	bne.n	8000ae2 <HAL_RCC_OscConfig+0x35a>
 8000ac8:	4ba4      	ldr	r3, [pc, #656]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000aca:	4aa4      	ldr	r2, [pc, #656]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000acc:	6a12      	ldr	r2, [r2, #32]
 8000ace:	2101      	movs	r1, #1
 8000ad0:	438a      	bics	r2, r1
 8000ad2:	621a      	str	r2, [r3, #32]
 8000ad4:	4ba1      	ldr	r3, [pc, #644]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000ad6:	4aa1      	ldr	r2, [pc, #644]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000ad8:	6a12      	ldr	r2, [r2, #32]
 8000ada:	2104      	movs	r1, #4
 8000adc:	438a      	bics	r2, r1
 8000ade:	621a      	str	r2, [r3, #32]
 8000ae0:	e01c      	b.n	8000b1c <HAL_RCC_OscConfig+0x394>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	2b05      	cmp	r3, #5
 8000ae8:	d10c      	bne.n	8000b04 <HAL_RCC_OscConfig+0x37c>
 8000aea:	4b9c      	ldr	r3, [pc, #624]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000aec:	4a9b      	ldr	r2, [pc, #620]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000aee:	6a12      	ldr	r2, [r2, #32]
 8000af0:	2104      	movs	r1, #4
 8000af2:	430a      	orrs	r2, r1
 8000af4:	621a      	str	r2, [r3, #32]
 8000af6:	4b99      	ldr	r3, [pc, #612]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000af8:	4a98      	ldr	r2, [pc, #608]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000afa:	6a12      	ldr	r2, [r2, #32]
 8000afc:	2101      	movs	r1, #1
 8000afe:	430a      	orrs	r2, r1
 8000b00:	621a      	str	r2, [r3, #32]
 8000b02:	e00b      	b.n	8000b1c <HAL_RCC_OscConfig+0x394>
 8000b04:	4b95      	ldr	r3, [pc, #596]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000b06:	4a95      	ldr	r2, [pc, #596]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000b08:	6a12      	ldr	r2, [r2, #32]
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	438a      	bics	r2, r1
 8000b0e:	621a      	str	r2, [r3, #32]
 8000b10:	4b92      	ldr	r3, [pc, #584]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000b12:	4a92      	ldr	r2, [pc, #584]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000b14:	6a12      	ldr	r2, [r2, #32]
 8000b16:	2104      	movs	r1, #4
 8000b18:	438a      	bics	r2, r1
 8000b1a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d014      	beq.n	8000b4e <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b24:	f7ff fbb8 	bl	8000298 <HAL_GetTick>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b2c:	e009      	b.n	8000b42 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b2e:	f7ff fbb3 	bl	8000298 <HAL_GetTick>
 8000b32:	0002      	movs	r2, r0
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	4a89      	ldr	r2, [pc, #548]	; (8000d60 <HAL_RCC_OscConfig+0x5d8>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d901      	bls.n	8000b42 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	e107      	b.n	8000d52 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b42:	4b86      	ldr	r3, [pc, #536]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000b44:	6a1b      	ldr	r3, [r3, #32]
 8000b46:	2202      	movs	r2, #2
 8000b48:	4013      	ands	r3, r2
 8000b4a:	d0f0      	beq.n	8000b2e <HAL_RCC_OscConfig+0x3a6>
 8000b4c:	e013      	b.n	8000b76 <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b4e:	f7ff fba3 	bl	8000298 <HAL_GetTick>
 8000b52:	0003      	movs	r3, r0
 8000b54:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b56:	e009      	b.n	8000b6c <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b58:	f7ff fb9e 	bl	8000298 <HAL_GetTick>
 8000b5c:	0002      	movs	r2, r0
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	4a7f      	ldr	r2, [pc, #508]	; (8000d60 <HAL_RCC_OscConfig+0x5d8>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d901      	bls.n	8000b6c <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	e0f2      	b.n	8000d52 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b6c:	4b7b      	ldr	r3, [pc, #492]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000b6e:	6a1b      	ldr	r3, [r3, #32]
 8000b70:	2202      	movs	r2, #2
 8000b72:	4013      	ands	r3, r2
 8000b74:	d1f0      	bne.n	8000b58 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000b76:	2317      	movs	r3, #23
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d105      	bne.n	8000b8c <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b80:	4b76      	ldr	r3, [pc, #472]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000b82:	4a76      	ldr	r2, [pc, #472]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000b84:	69d2      	ldr	r2, [r2, #28]
 8000b86:	4977      	ldr	r1, [pc, #476]	; (8000d64 <HAL_RCC_OscConfig+0x5dc>)
 8000b88:	400a      	ands	r2, r1
 8000b8a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2210      	movs	r2, #16
 8000b92:	4013      	ands	r3, r2
 8000b94:	d063      	beq.n	8000c5e <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d12a      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b9e:	4b6f      	ldr	r3, [pc, #444]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000ba0:	4a6e      	ldr	r2, [pc, #440]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000ba2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000baa:	4b6c      	ldr	r3, [pc, #432]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000bac:	4a6b      	ldr	r2, [pc, #428]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000bae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bb6:	f7ff fb6f 	bl	8000298 <HAL_GetTick>
 8000bba:	0003      	movs	r3, r0
 8000bbc:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000bbe:	e008      	b.n	8000bd2 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000bc0:	f7ff fb6a 	bl	8000298 <HAL_GetTick>
 8000bc4:	0002      	movs	r2, r0
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d901      	bls.n	8000bd2 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	e0bf      	b.n	8000d52 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000bd2:	4b62      	ldr	r3, [pc, #392]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	4013      	ands	r3, r2
 8000bda:	d0f1      	beq.n	8000bc0 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000bdc:	4a5f      	ldr	r2, [pc, #380]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000bde:	4b5f      	ldr	r3, [pc, #380]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be2:	21f8      	movs	r1, #248	; 0xf8
 8000be4:	438b      	bics	r3, r1
 8000be6:	0019      	movs	r1, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	430b      	orrs	r3, r1
 8000bf0:	6353      	str	r3, [r2, #52]	; 0x34
 8000bf2:	e034      	b.n	8000c5e <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	3305      	adds	r3, #5
 8000bfa:	d111      	bne.n	8000c20 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000bfc:	4b57      	ldr	r3, [pc, #348]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000bfe:	4a57      	ldr	r2, [pc, #348]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000c00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c02:	2104      	movs	r1, #4
 8000c04:	438a      	bics	r2, r1
 8000c06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c08:	4a54      	ldr	r2, [pc, #336]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000c0a:	4b54      	ldr	r3, [pc, #336]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c0e:	21f8      	movs	r1, #248	; 0xf8
 8000c10:	438b      	bics	r3, r1
 8000c12:	0019      	movs	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	430b      	orrs	r3, r1
 8000c1c:	6353      	str	r3, [r2, #52]	; 0x34
 8000c1e:	e01e      	b.n	8000c5e <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c20:	4b4e      	ldr	r3, [pc, #312]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000c22:	4a4e      	ldr	r2, [pc, #312]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000c24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c26:	2104      	movs	r1, #4
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000c2c:	4b4b      	ldr	r3, [pc, #300]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000c2e:	4a4b      	ldr	r2, [pc, #300]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000c30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c32:	2101      	movs	r1, #1
 8000c34:	438a      	bics	r2, r1
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c38:	f7ff fb2e 	bl	8000298 <HAL_GetTick>
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c40:	e008      	b.n	8000c54 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c42:	f7ff fb29 	bl	8000298 <HAL_GetTick>
 8000c46:	0002      	movs	r2, r0
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d901      	bls.n	8000c54 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8000c50:	2303      	movs	r3, #3
 8000c52:	e07e      	b.n	8000d52 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c54:	4b41      	ldr	r3, [pc, #260]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c58:	2202      	movs	r2, #2
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	d1f1      	bne.n	8000c42 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a1b      	ldr	r3, [r3, #32]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d100      	bne.n	8000c68 <HAL_RCC_OscConfig+0x4e0>
 8000c66:	e073      	b.n	8000d50 <HAL_RCC_OscConfig+0x5c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c68:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	220c      	movs	r2, #12
 8000c6e:	4013      	ands	r3, r2
 8000c70:	2b08      	cmp	r3, #8
 8000c72:	d100      	bne.n	8000c76 <HAL_RCC_OscConfig+0x4ee>
 8000c74:	e06a      	b.n	8000d4c <HAL_RCC_OscConfig+0x5c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6a1b      	ldr	r3, [r3, #32]
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d14b      	bne.n	8000d16 <HAL_RCC_OscConfig+0x58e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c7e:	4b37      	ldr	r3, [pc, #220]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000c80:	4a36      	ldr	r2, [pc, #216]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000c82:	6812      	ldr	r2, [r2, #0]
 8000c84:	4938      	ldr	r1, [pc, #224]	; (8000d68 <HAL_RCC_OscConfig+0x5e0>)
 8000c86:	400a      	ands	r2, r1
 8000c88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c8a:	f7ff fb05 	bl	8000298 <HAL_GetTick>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c92:	e008      	b.n	8000ca6 <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c94:	f7ff fb00 	bl	8000298 <HAL_GetTick>
 8000c98:	0002      	movs	r2, r0
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d901      	bls.n	8000ca6 <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	e055      	b.n	8000d52 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ca6:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	049b      	lsls	r3, r3, #18
 8000cae:	4013      	ands	r3, r2
 8000cb0:	d1f0      	bne.n	8000c94 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cb2:	4a2a      	ldr	r2, [pc, #168]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000cb4:	4b29      	ldr	r3, [pc, #164]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb8:	210f      	movs	r1, #15
 8000cba:	438b      	bics	r3, r1
 8000cbc:	0019      	movs	r1, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc2:	430b      	orrs	r3, r1
 8000cc4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cc6:	4a25      	ldr	r2, [pc, #148]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000cc8:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	4927      	ldr	r1, [pc, #156]	; (8000d6c <HAL_RCC_OscConfig+0x5e4>)
 8000cce:	4019      	ands	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd8:	4303      	orrs	r3, r0
 8000cda:	430b      	orrs	r3, r1
 8000cdc:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000cde:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000ce0:	4a1e      	ldr	r2, [pc, #120]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000ce2:	6812      	ldr	r2, [r2, #0]
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	0449      	lsls	r1, r1, #17
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cec:	f7ff fad4 	bl	8000298 <HAL_GetTick>
 8000cf0:	0003      	movs	r3, r0
 8000cf2:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cf4:	e008      	b.n	8000d08 <HAL_RCC_OscConfig+0x580>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cf6:	f7ff facf 	bl	8000298 <HAL_GetTick>
 8000cfa:	0002      	movs	r2, r0
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d901      	bls.n	8000d08 <HAL_RCC_OscConfig+0x580>
          {
            return HAL_TIMEOUT;
 8000d04:	2303      	movs	r3, #3
 8000d06:	e024      	b.n	8000d52 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	049b      	lsls	r3, r3, #18
 8000d10:	4013      	ands	r3, r2
 8000d12:	d0f0      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x56e>
 8000d14:	e01c      	b.n	8000d50 <HAL_RCC_OscConfig+0x5c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000d18:	4a10      	ldr	r2, [pc, #64]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000d1a:	6812      	ldr	r2, [r2, #0]
 8000d1c:	4912      	ldr	r1, [pc, #72]	; (8000d68 <HAL_RCC_OscConfig+0x5e0>)
 8000d1e:	400a      	ands	r2, r1
 8000d20:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d22:	f7ff fab9 	bl	8000298 <HAL_GetTick>
 8000d26:	0003      	movs	r3, r0
 8000d28:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d2a:	e008      	b.n	8000d3e <HAL_RCC_OscConfig+0x5b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d2c:	f7ff fab4 	bl	8000298 <HAL_GetTick>
 8000d30:	0002      	movs	r2, r0
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d901      	bls.n	8000d3e <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_TIMEOUT;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	e009      	b.n	8000d52 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <HAL_RCC_OscConfig+0x5d4>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	049b      	lsls	r3, r3, #18
 8000d46:	4013      	ands	r3, r2
 8000d48:	d1f0      	bne.n	8000d2c <HAL_RCC_OscConfig+0x5a4>
 8000d4a:	e001      	b.n	8000d50 <HAL_RCC_OscConfig+0x5c8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e000      	b.n	8000d52 <HAL_RCC_OscConfig+0x5ca>
    }
  }
  
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	0018      	movs	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b006      	add	sp, #24
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	00001388 	.word	0x00001388
 8000d64:	efffffff 	.word	0xefffffff
 8000d68:	feffffff 	.word	0xfeffffff
 8000d6c:	ffc2ffff 	.word	0xffc2ffff

08000d70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d7e:	4b69      	ldr	r3, [pc, #420]	; (8000f24 <HAL_RCC_ClockConfig+0x1b4>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2201      	movs	r2, #1
 8000d84:	401a      	ands	r2, r3
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d211      	bcs.n	8000db0 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d8c:	4b65      	ldr	r3, [pc, #404]	; (8000f24 <HAL_RCC_ClockConfig+0x1b4>)
 8000d8e:	4a65      	ldr	r2, [pc, #404]	; (8000f24 <HAL_RCC_ClockConfig+0x1b4>)
 8000d90:	6812      	ldr	r2, [r2, #0]
 8000d92:	2101      	movs	r1, #1
 8000d94:	438a      	bics	r2, r1
 8000d96:	0011      	movs	r1, r2
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d9e:	4b61      	ldr	r3, [pc, #388]	; (8000f24 <HAL_RCC_ClockConfig+0x1b4>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2201      	movs	r2, #1
 8000da4:	401a      	ands	r2, r3
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d001      	beq.n	8000db0 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e0b5      	b.n	8000f1c <HAL_RCC_ClockConfig+0x1ac>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2202      	movs	r2, #2
 8000db6:	4013      	ands	r3, r2
 8000db8:	d009      	beq.n	8000dce <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dba:	4a5b      	ldr	r2, [pc, #364]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000dbc:	4b5a      	ldr	r3, [pc, #360]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	21f0      	movs	r1, #240	; 0xf0
 8000dc2:	438b      	bics	r3, r1
 8000dc4:	0019      	movs	r1, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	430b      	orrs	r3, r1
 8000dcc:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	d100      	bne.n	8000dda <HAL_RCC_ClockConfig+0x6a>
 8000dd8:	e067      	b.n	8000eaa <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d107      	bne.n	8000df2 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de2:	4b51      	ldr	r3, [pc, #324]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	029b      	lsls	r3, r3, #10
 8000dea:	4013      	ands	r3, r2
 8000dec:	d114      	bne.n	8000e18 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e094      	b.n	8000f1c <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d107      	bne.n	8000e0a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dfa:	4b4b      	ldr	r3, [pc, #300]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	049b      	lsls	r3, r3, #18
 8000e02:	4013      	ands	r3, r2
 8000e04:	d108      	bne.n	8000e18 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e088      	b.n	8000f1c <HAL_RCC_ClockConfig+0x1ac>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0a:	4b47      	ldr	r3, [pc, #284]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2202      	movs	r2, #2
 8000e10:	4013      	ands	r3, r2
 8000e12:	d101      	bne.n	8000e18 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e081      	b.n	8000f1c <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e18:	4a43      	ldr	r2, [pc, #268]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000e1a:	4b43      	ldr	r3, [pc, #268]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2103      	movs	r1, #3
 8000e20:	438b      	bics	r3, r1
 8000e22:	0019      	movs	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e2c:	f7ff fa34 	bl	8000298 <HAL_GetTick>
 8000e30:	0003      	movs	r3, r0
 8000e32:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d111      	bne.n	8000e60 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e3c:	e009      	b.n	8000e52 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e3e:	f7ff fa2b 	bl	8000298 <HAL_GetTick>
 8000e42:	0002      	movs	r2, r0
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	4a38      	ldr	r2, [pc, #224]	; (8000f2c <HAL_RCC_ClockConfig+0x1bc>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d901      	bls.n	8000e52 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e064      	b.n	8000f1c <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e52:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	220c      	movs	r2, #12
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	d1ef      	bne.n	8000e3e <HAL_RCC_ClockConfig+0xce>
 8000e5e:	e024      	b.n	8000eaa <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d11b      	bne.n	8000ea0 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e68:	e009      	b.n	8000e7e <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e6a:	f7ff fa15 	bl	8000298 <HAL_GetTick>
 8000e6e:	0002      	movs	r2, r0
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	4a2d      	ldr	r2, [pc, #180]	; (8000f2c <HAL_RCC_ClockConfig+0x1bc>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d901      	bls.n	8000e7e <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e04e      	b.n	8000f1c <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e7e:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	220c      	movs	r2, #12
 8000e84:	4013      	ands	r3, r2
 8000e86:	2b08      	cmp	r3, #8
 8000e88:	d1ef      	bne.n	8000e6a <HAL_RCC_ClockConfig+0xfa>
 8000e8a:	e00e      	b.n	8000eaa <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e8c:	f7ff fa04 	bl	8000298 <HAL_GetTick>
 8000e90:	0002      	movs	r2, r0
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	4a25      	ldr	r2, [pc, #148]	; (8000f2c <HAL_RCC_ClockConfig+0x1bc>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d901      	bls.n	8000ea0 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e03d      	b.n	8000f1c <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ea0:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	220c      	movs	r2, #12
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	d1f0      	bne.n	8000e8c <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <HAL_RCC_ClockConfig+0x1b4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d911      	bls.n	8000edc <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_RCC_ClockConfig+0x1b4>)
 8000eba:	4a1a      	ldr	r2, [pc, #104]	; (8000f24 <HAL_RCC_ClockConfig+0x1b4>)
 8000ebc:	6812      	ldr	r2, [r2, #0]
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	438a      	bics	r2, r1
 8000ec2:	0011      	movs	r1, r2
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <HAL_RCC_ClockConfig+0x1b4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d001      	beq.n	8000edc <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e01f      	b.n	8000f1c <HAL_RCC_ClockConfig+0x1ac>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d008      	beq.n	8000ef8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000ee6:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	4910      	ldr	r1, [pc, #64]	; (8000f30 <HAL_RCC_ClockConfig+0x1c0>)
 8000eee:	4019      	ands	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	430b      	orrs	r3, r1
 8000ef6:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000ef8:	f000 f820 	bl	8000f3c <HAL_RCC_GetSysClockFreq>
 8000efc:	0001      	movs	r1, r0
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_RCC_ClockConfig+0x1b8>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	091b      	lsrs	r3, r3, #4
 8000f04:	220f      	movs	r2, #15
 8000f06:	4013      	ands	r3, r2
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_RCC_ClockConfig+0x1c4>)
 8000f0a:	5cd3      	ldrb	r3, [r2, r3]
 8000f0c:	000a      	movs	r2, r1
 8000f0e:	40da      	lsrs	r2, r3
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <HAL_RCC_ClockConfig+0x1c8>)
 8000f12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f14:	2000      	movs	r0, #0
 8000f16:	f7ff f997 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b004      	add	sp, #16
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40022000 	.word	0x40022000
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	00001388 	.word	0x00001388
 8000f30:	fffff8ff 	.word	0xfffff8ff
 8000f34:	08002ea8 	.word	0x08002ea8
 8000f38:	20000000 	.word	0x20000000

08000f3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b08f      	sub	sp, #60	; 0x3c
 8000f40:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000f42:	2314      	movs	r3, #20
 8000f44:	18fb      	adds	r3, r7, r3
 8000f46:	4a28      	ldr	r2, [pc, #160]	; (8000fe8 <HAL_RCC_GetSysClockFreq+0xac>)
 8000f48:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f4a:	c313      	stmia	r3!, {r0, r1, r4}
 8000f4c:	6812      	ldr	r2, [r2, #0]
 8000f4e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	4a26      	ldr	r2, [pc, #152]	; (8000fec <HAL_RCC_GetSysClockFreq+0xb0>)
 8000f54:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f56:	c313      	stmia	r3!, {r0, r1, r4}
 8000f58:	6812      	ldr	r2, [r2, #0]
 8000f5a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f60:	2300      	movs	r3, #0
 8000f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f64:	2300      	movs	r3, #0
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8000f70:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f78:	220c      	movs	r2, #12
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	d002      	beq.n	8000f86 <HAL_RCC_GetSysClockFreq+0x4a>
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	d003      	beq.n	8000f8c <HAL_RCC_GetSysClockFreq+0x50>
 8000f84:	e027      	b.n	8000fd6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f86:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000f8a:	e027      	b.n	8000fdc <HAL_RCC_GetSysClockFreq+0xa0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8e:	0c9b      	lsrs	r3, r3, #18
 8000f90:	220f      	movs	r2, #15
 8000f92:	4013      	ands	r3, r2
 8000f94:	2214      	movs	r2, #20
 8000f96:	18ba      	adds	r2, r7, r2
 8000f98:	5cd3      	ldrb	r3, [r2, r3]
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	1d3a      	adds	r2, r7, #4
 8000fa6:	5cd3      	ldrb	r3, [r2, r3]
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	025b      	lsls	r3, r3, #9
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d009      	beq.n	8000fc8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000fb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000fb6:	480f      	ldr	r0, [pc, #60]	; (8000ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000fb8:	f7ff f8a6 	bl	8000108 <__udivsi3>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc2:	4353      	muls	r3, r2
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8000fc6:	e003      	b.n	8000fd0 <HAL_RCC_GetSysClockFreq+0x94>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000fcc:	4353      	muls	r3, r2
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8000fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000fd4:	e002      	b.n	8000fdc <HAL_RCC_GetSysClockFreq+0xa0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000fd8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000fda:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8000fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8000fde:	0018      	movs	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b00f      	add	sp, #60	; 0x3c
 8000fe4:	bd90      	pop	{r4, r7, pc}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	08002e4c 	.word	0x08002e4c
 8000fec:	08002e5c 	.word	0x08002e5c
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	007a1200 	.word	0x007a1200
 8000ff8:	003d0900 	.word	0x003d0900

08000ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001000:	4b02      	ldr	r3, [pc, #8]	; (800100c <HAL_RCC_GetHCLKFreq+0x10>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	0018      	movs	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	20000000 	.word	0x20000000

08001010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001014:	f7ff fff2 	bl	8000ffc <HAL_RCC_GetHCLKFreq>
 8001018:	0001      	movs	r1, r0
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_RCC_GetPCLK1Freq+0x24>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	2207      	movs	r2, #7
 8001022:	4013      	ands	r3, r2
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001026:	5cd3      	ldrb	r3, [r2, r3]
 8001028:	40d9      	lsrs	r1, r3
 800102a:	000b      	movs	r3, r1
}    
 800102c:	0018      	movs	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	40021000 	.word	0x40021000
 8001038:	08002eb8 	.word	0x08002eb8

0800103c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	025b      	lsls	r3, r3, #9
 8001054:	4013      	ands	r3, r2
 8001056:	d100      	bne.n	800105a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001058:	e08e      	b.n	8001178 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800105a:	2317      	movs	r3, #23
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001062:	4b57      	ldr	r3, [pc, #348]	; (80011c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001064:	69da      	ldr	r2, [r3, #28]
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	055b      	lsls	r3, r3, #21
 800106a:	4013      	ands	r3, r2
 800106c:	d111      	bne.n	8001092 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	4b54      	ldr	r3, [pc, #336]	; (80011c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001070:	4a53      	ldr	r2, [pc, #332]	; (80011c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001072:	69d2      	ldr	r2, [r2, #28]
 8001074:	2180      	movs	r1, #128	; 0x80
 8001076:	0549      	lsls	r1, r1, #21
 8001078:	430a      	orrs	r2, r1
 800107a:	61da      	str	r2, [r3, #28]
 800107c:	4b50      	ldr	r3, [pc, #320]	; (80011c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800107e:	69da      	ldr	r2, [r3, #28]
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	055b      	lsls	r3, r3, #21
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800108a:	2317      	movs	r3, #23
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	2201      	movs	r2, #1
 8001090:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001092:	4b4c      	ldr	r3, [pc, #304]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	2380      	movs	r3, #128	; 0x80
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4013      	ands	r3, r2
 800109c:	d11a      	bne.n	80010d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800109e:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80010a0:	4a48      	ldr	r2, [pc, #288]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80010a2:	6812      	ldr	r2, [r2, #0]
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	0049      	lsls	r1, r1, #1
 80010a8:	430a      	orrs	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ac:	f7ff f8f4 	bl	8000298 <HAL_GetTick>
 80010b0:	0003      	movs	r3, r0
 80010b2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b4:	e008      	b.n	80010c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010b6:	f7ff f8ef 	bl	8000298 <HAL_GetTick>
 80010ba:	0002      	movs	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b64      	cmp	r3, #100	; 0x64
 80010c2:	d901      	bls.n	80010c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e076      	b.n	80011b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c8:	4b3e      	ldr	r3, [pc, #248]	; (80011c4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4013      	ands	r3, r2
 80010d2:	d0f0      	beq.n	80010b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80010d4:	4b3a      	ldr	r3, [pc, #232]	; (80011c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80010d6:	6a1a      	ldr	r2, [r3, #32]
 80010d8:	23c0      	movs	r3, #192	; 0xc0
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4013      	ands	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d034      	beq.n	8001150 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	23c0      	movs	r3, #192	; 0xc0
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	401a      	ands	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d02c      	beq.n	8001150 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80010f6:	4b32      	ldr	r3, [pc, #200]	; (80011c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	4a33      	ldr	r2, [pc, #204]	; (80011c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001100:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001102:	4a2f      	ldr	r2, [pc, #188]	; (80011c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001104:	6a12      	ldr	r2, [r2, #32]
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	0249      	lsls	r1, r1, #9
 800110a:	430a      	orrs	r2, r1
 800110c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800110e:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001110:	4a2b      	ldr	r2, [pc, #172]	; (80011c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001112:	6a12      	ldr	r2, [r2, #32]
 8001114:	492d      	ldr	r1, [pc, #180]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001116:	400a      	ands	r2, r1
 8001118:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800111a:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2201      	movs	r2, #1
 8001124:	4013      	ands	r3, r2
 8001126:	d013      	beq.n	8001150 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff f8b6 	bl	8000298 <HAL_GetTick>
 800112c:	0003      	movs	r3, r0
 800112e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001130:	e009      	b.n	8001146 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001132:	f7ff f8b1 	bl	8000298 <HAL_GetTick>
 8001136:	0002      	movs	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	4a24      	ldr	r2, [pc, #144]	; (80011d0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d901      	bls.n	8001146 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e037      	b.n	80011b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001146:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	2202      	movs	r2, #2
 800114c:	4013      	ands	r3, r2
 800114e:	d0f0      	beq.n	8001132 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001150:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	491c      	ldr	r1, [pc, #112]	; (80011c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001158:	4019      	ands	r1, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	430b      	orrs	r3, r1
 8001160:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001162:	2317      	movs	r3, #23
 8001164:	18fb      	adds	r3, r7, r3
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d105      	bne.n	8001178 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800116e:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001170:	69d2      	ldr	r2, [r2, #28]
 8001172:	4918      	ldr	r1, [pc, #96]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001174:	400a      	ands	r2, r1
 8001176:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2201      	movs	r2, #1
 800117e:	4013      	ands	r3, r2
 8001180:	d009      	beq.n	8001196 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001182:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	2103      	movs	r1, #3
 800118a:	438b      	bics	r3, r1
 800118c:	0019      	movs	r1, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	430b      	orrs	r3, r1
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2220      	movs	r2, #32
 800119c:	4013      	ands	r3, r2
 800119e:	d009      	beq.n	80011b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	2110      	movs	r1, #16
 80011a8:	438b      	bics	r3, r1
 80011aa:	0019      	movs	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	430b      	orrs	r3, r1
 80011b2:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	0018      	movs	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b006      	add	sp, #24
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40007000 	.word	0x40007000
 80011c8:	fffffcff 	.word	0xfffffcff
 80011cc:	fffeffff 	.word	0xfffeffff
 80011d0:	00001388 	.word	0x00001388
 80011d4:	efffffff 	.word	0xefffffff

080011d8 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e01e      	b.n	8001228 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	223d      	movs	r2, #61	; 0x3d
 80011ee:	5c9b      	ldrb	r3, [r3, r2]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d107      	bne.n	8001206 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	223c      	movs	r2, #60	; 0x3c
 80011fa:	2100      	movs	r1, #0
 80011fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	0018      	movs	r0, r3
 8001202:	f001 fc2d 	bl	8002a60 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	223d      	movs	r2, #61	; 0x3d
 800120a:	2102      	movs	r1, #2
 800120c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3304      	adds	r3, #4
 8001216:	0019      	movs	r1, r3
 8001218:	0010      	movs	r0, r2
 800121a:	f000 f929 	bl	8001470 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	223d      	movs	r2, #61	; 0x3d
 8001222:	2101      	movs	r1, #1
 8001224:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	0018      	movs	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	b002      	add	sp, #8
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e01e      	b.n	8001280 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	223d      	movs	r2, #61	; 0x3d
 8001246:	5c9b      	ldrb	r3, [r3, r2]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d107      	bne.n	800125e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	223c      	movs	r2, #60	; 0x3c
 8001252:	2100      	movs	r1, #0
 8001254:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	0018      	movs	r0, r3
 800125a:	f001 fbe3 	bl	8002a24 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	223d      	movs	r2, #61	; 0x3d
 8001262:	2102      	movs	r1, #2
 8001264:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3304      	adds	r3, #4
 800126e:	0019      	movs	r1, r3
 8001270:	0010      	movs	r0, r2
 8001272:	f000 f8fd 	bl	8001470 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	223d      	movs	r2, #61	; 0x3d
 800127a:	2101      	movs	r1, #1
 800127c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800127e:	2300      	movs	r3, #0
}
 8001280:	0018      	movs	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	b002      	add	sp, #8
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6839      	ldr	r1, [r7, #0]
 8001298:	2201      	movs	r2, #1
 800129a:	0018      	movs	r0, r3
 800129c:	f000 fb4e 	bl	800193c <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a13      	ldr	r2, [pc, #76]	; (80012f4 <HAL_TIM_PWM_Start+0x6c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d009      	beq.n	80012be <HAL_TIM_PWM_Start+0x36>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <HAL_TIM_PWM_Start+0x70>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d004      	beq.n	80012be <HAL_TIM_PWM_Start+0x36>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a10      	ldr	r2, [pc, #64]	; (80012fc <HAL_TIM_PWM_Start+0x74>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d101      	bne.n	80012c2 <HAL_TIM_PWM_Start+0x3a>
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <HAL_TIM_PWM_Start+0x3c>
 80012c2:	2300      	movs	r3, #0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <HAL_TIM_PWM_Start+0x52>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80012d2:	2180      	movs	r1, #128	; 0x80
 80012d4:	0209      	lsls	r1, r1, #8
 80012d6:	430a      	orrs	r2, r1
 80012d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6812      	ldr	r2, [r2, #0]
 80012e2:	6812      	ldr	r2, [r2, #0]
 80012e4:	2101      	movs	r1, #1
 80012e6:	430a      	orrs	r2, r1
 80012e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	0018      	movs	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b002      	add	sp, #8
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40012c00 	.word	0x40012c00
 80012f8:	40014400 	.word	0x40014400
 80012fc:	40014800 	.word	0x40014800

08001300 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	223c      	movs	r2, #60	; 0x3c
 8001310:	5c9b      	ldrb	r3, [r3, r2]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d101      	bne.n	800131a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001316:	2302      	movs	r3, #2
 8001318:	e0a4      	b.n	8001464 <HAL_TIM_PWM_ConfigChannel+0x164>
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	223c      	movs	r2, #60	; 0x3c
 800131e:	2101      	movs	r1, #1
 8001320:	5499      	strb	r1, [r3, r2]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	223d      	movs	r2, #61	; 0x3d
 8001326:	2102      	movs	r1, #2
 8001328:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b04      	cmp	r3, #4
 800132e:	d029      	beq.n	8001384 <HAL_TIM_PWM_ConfigChannel+0x84>
 8001330:	d802      	bhi.n	8001338 <HAL_TIM_PWM_ConfigChannel+0x38>
 8001332:	2b00      	cmp	r3, #0
 8001334:	d005      	beq.n	8001342 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
    }
    break;

    default:
    break;
 8001336:	e08c      	b.n	8001452 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8001338:	2b08      	cmp	r3, #8
 800133a:	d046      	beq.n	80013ca <HAL_TIM_PWM_ConfigChannel+0xca>
 800133c:	2b0c      	cmp	r3, #12
 800133e:	d065      	beq.n	800140c <HAL_TIM_PWM_ConfigChannel+0x10c>
    break;
 8001340:	e087      	b.n	8001452 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	0011      	movs	r1, r2
 800134a:	0018      	movs	r0, r3
 800134c:	f000 f8fe 	bl	800154c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	6992      	ldr	r2, [r2, #24]
 800135a:	2108      	movs	r1, #8
 800135c:	430a      	orrs	r2, r1
 800135e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	6812      	ldr	r2, [r2, #0]
 8001368:	6992      	ldr	r2, [r2, #24]
 800136a:	2104      	movs	r1, #4
 800136c:	438a      	bics	r2, r1
 800136e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	6991      	ldr	r1, [r2, #24]
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	6912      	ldr	r2, [r2, #16]
 800137e:	430a      	orrs	r2, r1
 8001380:	619a      	str	r2, [r3, #24]
    break;
 8001382:	e066      	b.n	8001452 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	0011      	movs	r1, r2
 800138c:	0018      	movs	r0, r3
 800138e:	f000 f961 	bl	8001654 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	6812      	ldr	r2, [r2, #0]
 800139a:	6992      	ldr	r2, [r2, #24]
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	0109      	lsls	r1, r1, #4
 80013a0:	430a      	orrs	r2, r1
 80013a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	6812      	ldr	r2, [r2, #0]
 80013ac:	6992      	ldr	r2, [r2, #24]
 80013ae:	492f      	ldr	r1, [pc, #188]	; (800146c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80013b0:	400a      	ands	r2, r1
 80013b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	6812      	ldr	r2, [r2, #0]
 80013bc:	6991      	ldr	r1, [r2, #24]
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	6912      	ldr	r2, [r2, #16]
 80013c2:	0212      	lsls	r2, r2, #8
 80013c4:	430a      	orrs	r2, r1
 80013c6:	619a      	str	r2, [r3, #24]
    break;
 80013c8:	e043      	b.n	8001452 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	0011      	movs	r1, r2
 80013d2:	0018      	movs	r0, r3
 80013d4:	f000 f9c2 	bl	800175c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	69d2      	ldr	r2, [r2, #28]
 80013e2:	2108      	movs	r1, #8
 80013e4:	430a      	orrs	r2, r1
 80013e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	69d2      	ldr	r2, [r2, #28]
 80013f2:	2104      	movs	r1, #4
 80013f4:	438a      	bics	r2, r1
 80013f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	6812      	ldr	r2, [r2, #0]
 8001400:	69d1      	ldr	r1, [r2, #28]
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	6912      	ldr	r2, [r2, #16]
 8001406:	430a      	orrs	r2, r1
 8001408:	61da      	str	r2, [r3, #28]
    break;
 800140a:	e022      	b.n	8001452 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	0011      	movs	r1, r2
 8001414:	0018      	movs	r0, r3
 8001416:	f000 fa27 	bl	8001868 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	69d2      	ldr	r2, [r2, #28]
 8001424:	2180      	movs	r1, #128	; 0x80
 8001426:	0109      	lsls	r1, r1, #4
 8001428:	430a      	orrs	r2, r1
 800142a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	69d2      	ldr	r2, [r2, #28]
 8001436:	490d      	ldr	r1, [pc, #52]	; (800146c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8001438:	400a      	ands	r2, r1
 800143a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	69d1      	ldr	r1, [r2, #28]
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	6912      	ldr	r2, [r2, #16]
 800144a:	0212      	lsls	r2, r2, #8
 800144c:	430a      	orrs	r2, r1
 800144e:	61da      	str	r2, [r3, #28]
    break;
 8001450:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	223d      	movs	r2, #61	; 0x3d
 8001456:	2101      	movs	r1, #1
 8001458:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	223c      	movs	r2, #60	; 0x3c
 800145e:	2100      	movs	r1, #0
 8001460:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	0018      	movs	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	b004      	add	sp, #16
 800146a:	bd80      	pop	{r7, pc}
 800146c:	fffffbff 	.word	0xfffffbff

08001470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a2b      	ldr	r2, [pc, #172]	; (8001534 <TIM_Base_SetConfig+0xc4>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d003      	beq.n	8001494 <TIM_Base_SetConfig+0x24>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a2a      	ldr	r2, [pc, #168]	; (8001538 <TIM_Base_SetConfig+0xc8>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d108      	bne.n	80014a6 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2270      	movs	r2, #112	; 0x70
 8001498:	4393      	bics	r3, r2
 800149a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a22      	ldr	r2, [pc, #136]	; (8001534 <TIM_Base_SetConfig+0xc4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d00f      	beq.n	80014ce <TIM_Base_SetConfig+0x5e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a21      	ldr	r2, [pc, #132]	; (8001538 <TIM_Base_SetConfig+0xc8>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d00b      	beq.n	80014ce <TIM_Base_SetConfig+0x5e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a20      	ldr	r2, [pc, #128]	; (800153c <TIM_Base_SetConfig+0xcc>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d007      	beq.n	80014ce <TIM_Base_SetConfig+0x5e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a1f      	ldr	r2, [pc, #124]	; (8001540 <TIM_Base_SetConfig+0xd0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d003      	beq.n	80014ce <TIM_Base_SetConfig+0x5e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a1e      	ldr	r2, [pc, #120]	; (8001544 <TIM_Base_SetConfig+0xd4>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d108      	bne.n	80014e0 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4a1d      	ldr	r2, [pc, #116]	; (8001548 <TIM_Base_SetConfig+0xd8>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2280      	movs	r2, #128	; 0x80
 80014e4:	4393      	bics	r3, r2
 80014e6:	001a      	movs	r2, r3
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <TIM_Base_SetConfig+0xc4>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d007      	beq.n	800151e <TIM_Base_SetConfig+0xae>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <TIM_Base_SetConfig+0xd0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d003      	beq.n	800151e <TIM_Base_SetConfig+0xae>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <TIM_Base_SetConfig+0xd4>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d103      	bne.n	8001526 <TIM_Base_SetConfig+0xb6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	691a      	ldr	r2, [r3, #16]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	615a      	str	r2, [r3, #20]
}
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b004      	add	sp, #16
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40012c00 	.word	0x40012c00
 8001538:	40000400 	.word	0x40000400
 800153c:	40002000 	.word	0x40002000
 8001540:	40014400 	.word	0x40014400
 8001544:	40014800 	.word	0x40014800
 8001548:	fffffcff 	.word	0xfffffcff

0800154c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	2201      	movs	r2, #1
 8001568:	4393      	bics	r3, r2
 800156a:	001a      	movs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2270      	movs	r2, #112	; 0x70
 8001586:	4393      	bics	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2203      	movs	r2, #3
 800158e:	4393      	bics	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	4313      	orrs	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	2202      	movs	r2, #2
 80015a0:	4393      	bics	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a23      	ldr	r2, [pc, #140]	; (8001640 <TIM_OC1_SetConfig+0xf4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d007      	beq.n	80015c6 <TIM_OC1_SetConfig+0x7a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a22      	ldr	r2, [pc, #136]	; (8001644 <TIM_OC1_SetConfig+0xf8>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d003      	beq.n	80015c6 <TIM_OC1_SetConfig+0x7a>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a21      	ldr	r2, [pc, #132]	; (8001648 <TIM_OC1_SetConfig+0xfc>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d10c      	bne.n	80015e0 <TIM_OC1_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	2208      	movs	r2, #8
 80015ca:	4393      	bics	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2204      	movs	r2, #4
 80015dc:	4393      	bics	r3, r2
 80015de:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a17      	ldr	r2, [pc, #92]	; (8001640 <TIM_OC1_SetConfig+0xf4>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d007      	beq.n	80015f8 <TIM_OC1_SetConfig+0xac>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a16      	ldr	r2, [pc, #88]	; (8001644 <TIM_OC1_SetConfig+0xf8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d003      	beq.n	80015f8 <TIM_OC1_SetConfig+0xac>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a15      	ldr	r2, [pc, #84]	; (8001648 <TIM_OC1_SetConfig+0xfc>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d111      	bne.n	800161c <TIM_OC1_SetConfig+0xd0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4a14      	ldr	r2, [pc, #80]	; (800164c <TIM_OC1_SetConfig+0x100>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4a13      	ldr	r2, [pc, #76]	; (8001650 <TIM_OC1_SetConfig+0x104>)
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	621a      	str	r2, [r3, #32]
}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	46bd      	mov	sp, r7
 800163a:	b006      	add	sp, #24
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	40012c00 	.word	0x40012c00
 8001644:	40014400 	.word	0x40014400
 8001648:	40014800 	.word	0x40014800
 800164c:	fffffeff 	.word	0xfffffeff
 8001650:	fffffdff 	.word	0xfffffdff

08001654 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	2210      	movs	r2, #16
 8001670:	4393      	bics	r3, r2
 8001672:	001a      	movs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4a2c      	ldr	r2, [pc, #176]	; (8001740 <TIM_OC2_SetConfig+0xec>)
 800168e:	4013      	ands	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4a2b      	ldr	r2, [pc, #172]	; (8001744 <TIM_OC2_SetConfig+0xf0>)
 8001696:	4013      	ands	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	2220      	movs	r2, #32
 80016aa:	4393      	bics	r3, r2
 80016ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a22      	ldr	r2, [pc, #136]	; (8001748 <TIM_OC2_SetConfig+0xf4>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d10d      	bne.n	80016de <TIM_OC2_SetConfig+0x8a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2280      	movs	r2, #128	; 0x80
 80016c6:	4393      	bics	r3, r2
 80016c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	2240      	movs	r2, #64	; 0x40
 80016da:	4393      	bics	r3, r2
 80016dc:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a19      	ldr	r2, [pc, #100]	; (8001748 <TIM_OC2_SetConfig+0xf4>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d007      	beq.n	80016f6 <TIM_OC2_SetConfig+0xa2>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a18      	ldr	r2, [pc, #96]	; (800174c <TIM_OC2_SetConfig+0xf8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d003      	beq.n	80016f6 <TIM_OC2_SetConfig+0xa2>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a17      	ldr	r2, [pc, #92]	; (8001750 <TIM_OC2_SetConfig+0xfc>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d113      	bne.n	800171e <TIM_OC2_SetConfig+0xca>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4a16      	ldr	r2, [pc, #88]	; (8001754 <TIM_OC2_SetConfig+0x100>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	4a15      	ldr	r2, [pc, #84]	; (8001758 <TIM_OC2_SetConfig+0x104>)
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	621a      	str	r2, [r3, #32]
}
 8001738:	46c0      	nop			; (mov r8, r8)
 800173a:	46bd      	mov	sp, r7
 800173c:	b006      	add	sp, #24
 800173e:	bd80      	pop	{r7, pc}
 8001740:	ffff8fff 	.word	0xffff8fff
 8001744:	fffffcff 	.word	0xfffffcff
 8001748:	40012c00 	.word	0x40012c00
 800174c:	40014400 	.word	0x40014400
 8001750:	40014800 	.word	0x40014800
 8001754:	fffffbff 	.word	0xfffffbff
 8001758:	fffff7ff 	.word	0xfffff7ff

0800175c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	4a33      	ldr	r2, [pc, #204]	; (8001844 <TIM_OC3_SetConfig+0xe8>)
 8001778:	401a      	ands	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2270      	movs	r2, #112	; 0x70
 8001794:	4393      	bics	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2203      	movs	r2, #3
 800179c:	4393      	bics	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	4a26      	ldr	r2, [pc, #152]	; (8001848 <TIM_OC3_SetConfig+0xec>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a22      	ldr	r2, [pc, #136]	; (800184c <TIM_OC3_SetConfig+0xf0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d10d      	bne.n	80017e2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	4a21      	ldr	r2, [pc, #132]	; (8001850 <TIM_OC3_SetConfig+0xf4>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	4a1d      	ldr	r2, [pc, #116]	; (8001854 <TIM_OC3_SetConfig+0xf8>)
 80017de:	4013      	ands	r3, r2
 80017e0:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a19      	ldr	r2, [pc, #100]	; (800184c <TIM_OC3_SetConfig+0xf0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d007      	beq.n	80017fa <TIM_OC3_SetConfig+0x9e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a1a      	ldr	r2, [pc, #104]	; (8001858 <TIM_OC3_SetConfig+0xfc>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d003      	beq.n	80017fa <TIM_OC3_SetConfig+0x9e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a19      	ldr	r2, [pc, #100]	; (800185c <TIM_OC3_SetConfig+0x100>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d113      	bne.n	8001822 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4a18      	ldr	r2, [pc, #96]	; (8001860 <TIM_OC3_SetConfig+0x104>)
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4a17      	ldr	r2, [pc, #92]	; (8001864 <TIM_OC3_SetConfig+0x108>)
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	621a      	str	r2, [r3, #32]
}
 800183c:	46c0      	nop			; (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	b006      	add	sp, #24
 8001842:	bd80      	pop	{r7, pc}
 8001844:	fffffeff 	.word	0xfffffeff
 8001848:	fffffdff 	.word	0xfffffdff
 800184c:	40012c00 	.word	0x40012c00
 8001850:	fffff7ff 	.word	0xfffff7ff
 8001854:	fffffbff 	.word	0xfffffbff
 8001858:	40014400 	.word	0x40014400
 800185c:	40014800 	.word	0x40014800
 8001860:	ffffefff 	.word	0xffffefff
 8001864:	ffffdfff 	.word	0xffffdfff

08001868 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	4a26      	ldr	r2, [pc, #152]	; (800191c <TIM_OC4_SetConfig+0xb4>)
 8001884:	401a      	ands	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4a20      	ldr	r2, [pc, #128]	; (8001920 <TIM_OC4_SetConfig+0xb8>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4a1f      	ldr	r2, [pc, #124]	; (8001924 <TIM_OC4_SetConfig+0xbc>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4a1b      	ldr	r2, [pc, #108]	; (8001928 <TIM_OC4_SetConfig+0xc0>)
 80018bc:	4013      	ands	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	031b      	lsls	r3, r3, #12
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a17      	ldr	r2, [pc, #92]	; (800192c <TIM_OC4_SetConfig+0xc4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d007      	beq.n	80018e4 <TIM_OC4_SetConfig+0x7c>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a16      	ldr	r2, [pc, #88]	; (8001930 <TIM_OC4_SetConfig+0xc8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d003      	beq.n	80018e4 <TIM_OC4_SetConfig+0x7c>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a15      	ldr	r2, [pc, #84]	; (8001934 <TIM_OC4_SetConfig+0xcc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d109      	bne.n	80018f8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	4a14      	ldr	r2, [pc, #80]	; (8001938 <TIM_OC4_SetConfig+0xd0>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	019b      	lsls	r3, r3, #6
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	621a      	str	r2, [r3, #32]
}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	46bd      	mov	sp, r7
 8001916:	b006      	add	sp, #24
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	ffffefff 	.word	0xffffefff
 8001920:	ffff8fff 	.word	0xffff8fff
 8001924:	fffffcff 	.word	0xfffffcff
 8001928:	ffffdfff 	.word	0xffffdfff
 800192c:	40012c00 	.word	0x40012c00
 8001930:	40014400 	.word	0x40014400
 8001934:	40014800 	.word	0x40014800
 8001938:	ffffbfff 	.word	0xffffbfff

0800193c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800194c:	2201      	movs	r2, #1
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	409a      	lsls	r2, r3
 8001952:	0013      	movs	r3, r2
 8001954:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	43d2      	mvns	r2, r2
 800195e:	401a      	ands	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a1a      	ldr	r2, [r3, #32]
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	4099      	lsls	r1, r3
 800196e:	000b      	movs	r3, r1
 8001970:	431a      	orrs	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	621a      	str	r2, [r3, #32]
}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b006      	add	sp, #24
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	223c      	movs	r2, #60	; 0x3c
 800198c:	5c9b      	ldrb	r3, [r3, r2]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d101      	bne.n	8001996 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001992:	2302      	movs	r3, #2
 8001994:	e032      	b.n	80019fc <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	223c      	movs	r2, #60	; 0x3c
 800199a:	2101      	movs	r1, #1
 800199c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	223d      	movs	r2, #61	; 0x3d
 80019a2:	2102      	movs	r1, #2
 80019a4:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	6852      	ldr	r2, [r2, #4]
 80019b0:	2170      	movs	r1, #112	; 0x70
 80019b2:	438a      	bics	r2, r1
 80019b4:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	6851      	ldr	r1, [r2, #4]
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	6892      	ldr	r2, [r2, #8]
 80019d2:	2180      	movs	r1, #128	; 0x80
 80019d4:	438a      	bics	r2, r1
 80019d6:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	6891      	ldr	r1, [r2, #8]
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	6852      	ldr	r2, [r2, #4]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	223d      	movs	r2, #61	; 0x3d
 80019ee:	2101      	movs	r1, #1
 80019f0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	223c      	movs	r2, #60	; 0x3c
 80019f6:	2100      	movs	r1, #0
 80019f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b002      	add	sp, #8
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	223c      	movs	r2, #60	; 0x3c
 8001a16:	5c9b      	ldrb	r3, [r3, r2]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e04d      	b.n	8001abc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	223c      	movs	r2, #60	; 0x3c
 8001a24:	2101      	movs	r1, #1
 8001a26:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	223d      	movs	r2, #61	; 0x3d
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	22ff      	movs	r2, #255	; 0xff
 8001a34:	4393      	bics	r3, r2
 8001a36:	001a      	movs	r2, r3
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4a20      	ldr	r2, [pc, #128]	; (8001ac4 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 8001a44:	401a      	ands	r2, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4a1d      	ldr	r2, [pc, #116]	; (8001ac8 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>)
 8001a52:	401a      	ands	r2, r3
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4a1b      	ldr	r2, [pc, #108]	; (8001acc <HAL_TIMEx_ConfigBreakDeadTime+0xc8>)
 8001a60:	401a      	ands	r2, r3
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4a18      	ldr	r2, [pc, #96]	; (8001ad0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>)
 8001a6e:	401a      	ands	r2, r3
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4a16      	ldr	r2, [pc, #88]	; (8001ad4 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>)
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4a11      	ldr	r2, [pc, #68]	; (8001adc <HAL_TIMEx_ConfigBreakDeadTime+0xd8>)
 8001a98:	401a      	ands	r2, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	645a      	str	r2, [r3, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	223d      	movs	r2, #61	; 0x3d
 8001aae:	2101      	movs	r1, #1
 8001ab0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	223c      	movs	r2, #60	; 0x3c
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b004      	add	sp, #16
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	fffffcff 	.word	0xfffffcff
 8001ac8:	fffffbff 	.word	0xfffffbff
 8001acc:	fffff7ff 	.word	0xfffff7ff
 8001ad0:	ffffefff 	.word	0xffffefff
 8001ad4:	ffffdfff 	.word	0xffffdfff
 8001ad8:	ffffbfff 	.word	0xffffbfff
 8001adc:	ffff7fff 	.word	0xffff7fff

08001ae0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e047      	b.n	8001b82 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2269      	movs	r2, #105	; 0x69
 8001af6:	5c9b      	ldrb	r3, [r3, r2]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d107      	bne.n	8001b0e <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2268      	movs	r2, #104	; 0x68
 8001b02:	2100      	movs	r1, #0
 8001b04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f001 f88d 	bl	8002c28 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2269      	movs	r2, #105	; 0x69
 8001b12:	2124      	movs	r1, #36	; 0x24
 8001b14:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	2101      	movs	r1, #1
 8001b22:	438a      	bics	r2, r1
 8001b24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f000 f8ff 	bl	8001d2c <UART_SetConfig>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e024      	b.n	8001b82 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	0018      	movs	r0, r3
 8001b44:	f000 fa50 	bl	8001fe8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	6852      	ldr	r2, [r2, #4]
 8001b52:	490e      	ldr	r1, [pc, #56]	; (8001b8c <HAL_UART_Init+0xac>)
 8001b54:	400a      	ands	r2, r1
 8001b56:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	6892      	ldr	r2, [r2, #8]
 8001b62:	2108      	movs	r1, #8
 8001b64:	438a      	bics	r2, r1
 8001b66:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	2101      	movs	r1, #1
 8001b74:	430a      	orrs	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f000 fae0 	bl	8002140 <UART_CheckIdleState>
 8001b80:	0003      	movs	r3, r0
}
 8001b82:	0018      	movs	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b002      	add	sp, #8
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	fffff7ff 	.word	0xfffff7ff

08001b90 <HAL_UART_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af02      	add	r7, sp, #8
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	1dbb      	adds	r3, r7, #6
 8001b9e:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	226a      	movs	r2, #106	; 0x6a
 8001ba8:	5c9b      	ldrb	r3, [r3, r2]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	d000      	beq.n	8001bb2 <HAL_UART_Receive+0x22>
 8001bb0:	e0b4      	b.n	8001d1c <HAL_UART_Receive+0x18c>
  {
    if((pData == NULL ) || (Size == 0U))
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_UART_Receive+0x30>
 8001bb8:	1dbb      	adds	r3, r7, #6
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_UART_Receive+0x34>
    {
      return  HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0ac      	b.n	8001d1e <HAL_UART_Receive+0x18e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	015b      	lsls	r3, r3, #5
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d109      	bne.n	8001be4 <HAL_UART_Receive+0x54>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d105      	bne.n	8001be4 <HAL_UART_Receive+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d001      	beq.n	8001be4 <HAL_UART_Receive+0x54>
      {
        return  HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e09c      	b.n	8001d1e <HAL_UART_Receive+0x18e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2268      	movs	r2, #104	; 0x68
 8001be8:	5c9b      	ldrb	r3, [r3, r2]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_UART_Receive+0x62>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e095      	b.n	8001d1e <HAL_UART_Receive+0x18e>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2268      	movs	r2, #104	; 0x68
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	226a      	movs	r2, #106	; 0x6a
 8001c04:	2122      	movs	r1, #34	; 0x22
 8001c06:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001c08:	f7fe fb46 	bl	8000298 <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	61fb      	str	r3, [r7, #28]

    huart->RxXferSize = Size;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1dba      	adds	r2, r7, #6
 8001c14:	2158      	movs	r1, #88	; 0x58
 8001c16:	8812      	ldrh	r2, [r2, #0]
 8001c18:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1dba      	adds	r2, r7, #6
 8001c1e:	215a      	movs	r1, #90	; 0x5a
 8001c20:	8812      	ldrh	r2, [r2, #0]
 8001c22:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	015b      	lsls	r3, r3, #5
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d10d      	bne.n	8001c4c <HAL_UART_Receive+0xbc>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d104      	bne.n	8001c42 <HAL_UART_Receive+0xb2>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	225c      	movs	r2, #92	; 0x5c
 8001c3c:	493a      	ldr	r1, [pc, #232]	; (8001d28 <HAL_UART_Receive+0x198>)
 8001c3e:	5299      	strh	r1, [r3, r2]
 8001c40:	e015      	b.n	8001c6e <HAL_UART_Receive+0xde>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	225c      	movs	r2, #92	; 0x5c
 8001c46:	21ff      	movs	r1, #255	; 0xff
 8001c48:	5299      	strh	r1, [r3, r2]
 8001c4a:	e010      	b.n	8001c6e <HAL_UART_Receive+0xde>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10c      	bne.n	8001c6e <HAL_UART_Receive+0xde>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d104      	bne.n	8001c66 <HAL_UART_Receive+0xd6>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	225c      	movs	r2, #92	; 0x5c
 8001c60:	21ff      	movs	r1, #255	; 0xff
 8001c62:	5299      	strh	r1, [r3, r2]
 8001c64:	e003      	b.n	8001c6e <HAL_UART_Receive+0xde>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	225c      	movs	r2, #92	; 0x5c
 8001c6a:	217f      	movs	r1, #127	; 0x7f
 8001c6c:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001c6e:	231a      	movs	r3, #26
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	215c      	movs	r1, #92	; 0x5c
 8001c76:	5a52      	ldrh	r2, [r2, r1]
 8001c78:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8001c7a:	e03f      	b.n	8001cfc <HAL_UART_Receive+0x16c>
    {
      huart->RxXferCount--;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	225a      	movs	r2, #90	; 0x5a
 8001c80:	5a9b      	ldrh	r3, [r3, r2]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	3b01      	subs	r3, #1
 8001c86:	b299      	uxth	r1, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	225a      	movs	r2, #90	; 0x5a
 8001c8c:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	0013      	movs	r3, r2
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2120      	movs	r1, #32
 8001c9c:	f000 fa68 	bl	8002170 <UART_WaitOnFlagUntilTimeout>
 8001ca0:	1e03      	subs	r3, r0, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_UART_Receive+0x118>
      {
        return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e03a      	b.n	8001d1e <HAL_UART_Receive+0x18e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	015b      	lsls	r3, r3, #5
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d114      	bne.n	8001cde <HAL_UART_Receive+0x14e>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d110      	bne.n	8001cde <HAL_UART_Receive+0x14e>
      {
        tmp = (uint16_t*) pData ;
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	221a      	movs	r2, #26
 8001cca:	18ba      	adds	r2, r7, r2
 8001ccc:	8812      	ldrh	r2, [r2, #0]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	3302      	adds	r3, #2
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	e00e      	b.n	8001cfc <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	60ba      	str	r2, [r7, #8]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001cea:	b292      	uxth	r2, r2
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	211a      	movs	r1, #26
 8001cf0:	1879      	adds	r1, r7, r1
 8001cf2:	8809      	ldrh	r1, [r1, #0]
 8001cf4:	b2c9      	uxtb	r1, r1
 8001cf6:	400a      	ands	r2, r1
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	225a      	movs	r2, #90	; 0x5a
 8001d00:	5a9b      	ldrh	r3, [r3, r2]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1b9      	bne.n	8001c7c <HAL_UART_Receive+0xec>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	226a      	movs	r2, #106	; 0x6a
 8001d0c:	2120      	movs	r1, #32
 8001d0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2268      	movs	r2, #104	; 0x68
 8001d14:	2100      	movs	r1, #0
 8001d16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	e000      	b.n	8001d1e <HAL_UART_Receive+0x18e>
  }
  else
  {
    return HAL_BUSY;
 8001d1c:	2302      	movs	r3, #2
  }
}
 8001d1e:	0018      	movs	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b008      	add	sp, #32
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	000001ff 	.word	0x000001ff

08001d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001d38:	2317      	movs	r3, #23
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	2210      	movs	r2, #16
 8001d3e:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8001d40:	230a      	movs	r3, #10
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	2200      	movs	r2, #0
 8001d46:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8001d48:	2314      	movs	r3, #20
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d50:	2313      	movs	r3, #19
 8001d52:	18fb      	adds	r3, r7, r3
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	4995      	ldr	r1, [pc, #596]	; (8001fd0 <UART_SetConfig+0x2a4>)
 8001d7c:	4011      	ands	r1, r2
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	6852      	ldr	r2, [r2, #4]
 8001d8e:	4991      	ldr	r1, [pc, #580]	; (8001fd4 <UART_SetConfig+0x2a8>)
 8001d90:	4011      	ands	r1, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68d2      	ldr	r2, [r2, #12]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699a      	ldr	r2, [r3, #24]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	6892      	ldr	r2, [r2, #8]
 8001db0:	4989      	ldr	r1, [pc, #548]	; (8001fd8 <UART_SetConfig+0x2ac>)
 8001db2:	4011      	ands	r1, r2
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001dba:	4b88      	ldr	r3, [pc, #544]	; (8001fdc <UART_SetConfig+0x2b0>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d00f      	beq.n	8001de6 <UART_SetConfig+0xba>
 8001dc6:	d304      	bcc.n	8001dd2 <UART_SetConfig+0xa6>
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d011      	beq.n	8001df0 <UART_SetConfig+0xc4>
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d005      	beq.n	8001ddc <UART_SetConfig+0xb0>
 8001dd0:	e013      	b.n	8001dfa <UART_SetConfig+0xce>
 8001dd2:	2317      	movs	r3, #23
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
 8001dda:	e012      	b.n	8001e02 <UART_SetConfig+0xd6>
 8001ddc:	2317      	movs	r3, #23
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	2202      	movs	r2, #2
 8001de2:	701a      	strb	r2, [r3, #0]
 8001de4:	e00d      	b.n	8001e02 <UART_SetConfig+0xd6>
 8001de6:	2317      	movs	r3, #23
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	2204      	movs	r2, #4
 8001dec:	701a      	strb	r2, [r3, #0]
 8001dee:	e008      	b.n	8001e02 <UART_SetConfig+0xd6>
 8001df0:	2317      	movs	r3, #23
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	2208      	movs	r2, #8
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	e003      	b.n	8001e02 <UART_SetConfig+0xd6>
 8001dfa:	2317      	movs	r3, #23
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	2210      	movs	r2, #16
 8001e00:	701a      	strb	r2, [r3, #0]
 8001e02:	46c0      	nop			; (mov r8, r8)
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69da      	ldr	r2, [r3, #28]
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d000      	beq.n	8001e12 <UART_SetConfig+0xe6>
 8001e10:	e07b      	b.n	8001f0a <UART_SetConfig+0x1de>
  {
    switch (clocksource)
 8001e12:	2317      	movs	r3, #23
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d01c      	beq.n	8001e56 <UART_SetConfig+0x12a>
 8001e1c:	dc02      	bgt.n	8001e24 <UART_SetConfig+0xf8>
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <UART_SetConfig+0x102>
 8001e22:	e04f      	b.n	8001ec4 <UART_SetConfig+0x198>
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d027      	beq.n	8001e78 <UART_SetConfig+0x14c>
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d039      	beq.n	8001ea0 <UART_SetConfig+0x174>
 8001e2c:	e04a      	b.n	8001ec4 <UART_SetConfig+0x198>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001e2e:	f7ff f8ef 	bl	8001010 <HAL_RCC_GetPCLK1Freq>
 8001e32:	0003      	movs	r3, r0
 8001e34:	005a      	lsls	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	085b      	lsrs	r3, r3, #1
 8001e3c:	18d2      	adds	r2, r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	0019      	movs	r1, r3
 8001e44:	0010      	movs	r0, r2
 8001e46:	f7fe f95f 	bl	8000108 <__udivsi3>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	001a      	movs	r2, r3
 8001e4e:	2314      	movs	r3, #20
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	801a      	strh	r2, [r3, #0]
        break;
 8001e54:	e03b      	b.n	8001ece <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	085b      	lsrs	r3, r3, #1
 8001e5c:	4a60      	ldr	r2, [pc, #384]	; (8001fe0 <UART_SetConfig+0x2b4>)
 8001e5e:	189a      	adds	r2, r3, r2
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	0019      	movs	r1, r3
 8001e66:	0010      	movs	r0, r2
 8001e68:	f7fe f94e 	bl	8000108 <__udivsi3>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	001a      	movs	r2, r3
 8001e70:	2314      	movs	r3, #20
 8001e72:	18fb      	adds	r3, r7, r3
 8001e74:	801a      	strh	r2, [r3, #0]
        break;
 8001e76:	e02a      	b.n	8001ece <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e78:	f7ff f860 	bl	8000f3c <HAL_RCC_GetSysClockFreq>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	005a      	lsls	r2, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	085b      	lsrs	r3, r3, #1
 8001e86:	18d2      	adds	r2, r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	0010      	movs	r0, r2
 8001e90:	f7fe f93a 	bl	8000108 <__udivsi3>
 8001e94:	0003      	movs	r3, r0
 8001e96:	001a      	movs	r2, r3
 8001e98:	2314      	movs	r3, #20
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	801a      	strh	r2, [r3, #0]
        break;
 8001e9e:	e016      	b.n	8001ece <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	085b      	lsrs	r3, r3, #1
 8001ea6:	2280      	movs	r2, #128	; 0x80
 8001ea8:	0252      	lsls	r2, r2, #9
 8001eaa:	189a      	adds	r2, r3, r2
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	0010      	movs	r0, r2
 8001eb4:	f7fe f928 	bl	8000108 <__udivsi3>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	001a      	movs	r2, r3
 8001ebc:	2314      	movs	r3, #20
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	801a      	strh	r2, [r3, #0]
        break;
 8001ec2:	e004      	b.n	8001ece <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001ec4:	2313      	movs	r3, #19
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
        break;
 8001ecc:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001ece:	230a      	movs	r3, #10
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	2214      	movs	r2, #20
 8001ed4:	18ba      	adds	r2, r7, r2
 8001ed6:	8812      	ldrh	r2, [r2, #0]
 8001ed8:	210f      	movs	r1, #15
 8001eda:	438a      	bics	r2, r1
 8001edc:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ede:	2314      	movs	r3, #20
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	105b      	asrs	r3, r3, #1
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	2207      	movs	r2, #7
 8001eea:	4013      	ands	r3, r2
 8001eec:	b299      	uxth	r1, r3
 8001eee:	230a      	movs	r3, #10
 8001ef0:	18fb      	adds	r3, r7, r3
 8001ef2:	220a      	movs	r2, #10
 8001ef4:	18ba      	adds	r2, r7, r2
 8001ef6:	8812      	ldrh	r2, [r2, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	220a      	movs	r2, #10
 8001f02:	18ba      	adds	r2, r7, r2
 8001f04:	8812      	ldrh	r2, [r2, #0]
 8001f06:	60da      	str	r2, [r3, #12]
 8001f08:	e05b      	b.n	8001fc2 <UART_SetConfig+0x296>
  }
  else
  {
    switch (clocksource)
 8001f0a:	2317      	movs	r3, #23
 8001f0c:	18fb      	adds	r3, r7, r3
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d01b      	beq.n	8001f4c <UART_SetConfig+0x220>
 8001f14:	dc02      	bgt.n	8001f1c <UART_SetConfig+0x1f0>
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d005      	beq.n	8001f26 <UART_SetConfig+0x1fa>
 8001f1a:	e04d      	b.n	8001fb8 <UART_SetConfig+0x28c>
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d026      	beq.n	8001f6e <UART_SetConfig+0x242>
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d037      	beq.n	8001f94 <UART_SetConfig+0x268>
 8001f24:	e048      	b.n	8001fb8 <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681c      	ldr	r4, [r3, #0]
 8001f2a:	f7ff f871 	bl	8001010 <HAL_RCC_GetPCLK1Freq>
 8001f2e:	0002      	movs	r2, r0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	085b      	lsrs	r3, r3, #1
 8001f36:	18d2      	adds	r2, r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	0010      	movs	r0, r2
 8001f40:	f7fe f8e2 	bl	8000108 <__udivsi3>
 8001f44:	0003      	movs	r3, r0
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	60e3      	str	r3, [r4, #12]
        break;
 8001f4a:	e03a      	b.n	8001fc2 <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681c      	ldr	r4, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	085b      	lsrs	r3, r3, #1
 8001f56:	4a23      	ldr	r2, [pc, #140]	; (8001fe4 <UART_SetConfig+0x2b8>)
 8001f58:	189a      	adds	r2, r3, r2
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	0019      	movs	r1, r3
 8001f60:	0010      	movs	r0, r2
 8001f62:	f7fe f8d1 	bl	8000108 <__udivsi3>
 8001f66:	0003      	movs	r3, r0
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	60e3      	str	r3, [r4, #12]
        break;
 8001f6c:	e029      	b.n	8001fc2 <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681c      	ldr	r4, [r3, #0]
 8001f72:	f7fe ffe3 	bl	8000f3c <HAL_RCC_GetSysClockFreq>
 8001f76:	0002      	movs	r2, r0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	085b      	lsrs	r3, r3, #1
 8001f7e:	18d2      	adds	r2, r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	0019      	movs	r1, r3
 8001f86:	0010      	movs	r0, r2
 8001f88:	f7fe f8be 	bl	8000108 <__udivsi3>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	60e3      	str	r3, [r4, #12]
        break;
 8001f92:	e016      	b.n	8001fc2 <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681c      	ldr	r4, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	085b      	lsrs	r3, r3, #1
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	0212      	lsls	r2, r2, #8
 8001fa2:	189a      	adds	r2, r3, r2
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	0019      	movs	r1, r3
 8001faa:	0010      	movs	r0, r2
 8001fac:	f7fe f8ac 	bl	8000108 <__udivsi3>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	60e3      	str	r3, [r4, #12]
        break;
 8001fb6:	e004      	b.n	8001fc2 <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001fb8:	2313      	movs	r3, #19
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
        break;
 8001fc0:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8001fc2:	2313      	movs	r3, #19
 8001fc4:	18fb      	adds	r3, r7, r3
 8001fc6:	781b      	ldrb	r3, [r3, #0]

}
 8001fc8:	0018      	movs	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b007      	add	sp, #28
 8001fce:	bd90      	pop	{r4, r7, pc}
 8001fd0:	ffff69f3 	.word	0xffff69f3
 8001fd4:	ffffcfff 	.word	0xffffcfff
 8001fd8:	fffff4ff 	.word	0xfffff4ff
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	00f42400 	.word	0x00f42400
 8001fe4:	007a1200 	.word	0x007a1200

08001fe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d00a      	beq.n	8002010 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	6852      	ldr	r2, [r2, #4]
 8002004:	4945      	ldr	r1, [pc, #276]	; (800211c <UART_AdvFeatureConfig+0x134>)
 8002006:	4011      	ands	r1, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800200c:	430a      	orrs	r2, r1
 800200e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	2202      	movs	r2, #2
 8002016:	4013      	ands	r3, r2
 8002018:	d00a      	beq.n	8002030 <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	6852      	ldr	r2, [r2, #4]
 8002024:	493e      	ldr	r1, [pc, #248]	; (8002120 <UART_AdvFeatureConfig+0x138>)
 8002026:	4011      	ands	r1, r2
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800202c:	430a      	orrs	r2, r1
 800202e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	2204      	movs	r2, #4
 8002036:	4013      	ands	r3, r2
 8002038:	d00a      	beq.n	8002050 <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	6852      	ldr	r2, [r2, #4]
 8002044:	4937      	ldr	r1, [pc, #220]	; (8002124 <UART_AdvFeatureConfig+0x13c>)
 8002046:	4011      	ands	r1, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800204c:	430a      	orrs	r2, r1
 800204e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	2208      	movs	r2, #8
 8002056:	4013      	ands	r3, r2
 8002058:	d00a      	beq.n	8002070 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	6852      	ldr	r2, [r2, #4]
 8002064:	4930      	ldr	r1, [pc, #192]	; (8002128 <UART_AdvFeatureConfig+0x140>)
 8002066:	4011      	ands	r1, r2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800206c:	430a      	orrs	r2, r1
 800206e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	2210      	movs	r2, #16
 8002076:	4013      	ands	r3, r2
 8002078:	d00a      	beq.n	8002090 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	6892      	ldr	r2, [r2, #8]
 8002084:	4929      	ldr	r1, [pc, #164]	; (800212c <UART_AdvFeatureConfig+0x144>)
 8002086:	4011      	ands	r1, r2
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800208c:	430a      	orrs	r2, r1
 800208e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	2220      	movs	r2, #32
 8002096:	4013      	ands	r3, r2
 8002098:	d00a      	beq.n	80020b0 <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	6892      	ldr	r2, [r2, #8]
 80020a4:	4922      	ldr	r1, [pc, #136]	; (8002130 <UART_AdvFeatureConfig+0x148>)
 80020a6:	4011      	ands	r1, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020ac:	430a      	orrs	r2, r1
 80020ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	2240      	movs	r2, #64	; 0x40
 80020b6:	4013      	ands	r3, r2
 80020b8:	d01b      	beq.n	80020f2 <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	6852      	ldr	r2, [r2, #4]
 80020c4:	491b      	ldr	r1, [pc, #108]	; (8002134 <UART_AdvFeatureConfig+0x14c>)
 80020c6:	4011      	ands	r1, r2
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020cc:	430a      	orrs	r2, r1
 80020ce:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	035b      	lsls	r3, r3, #13
 80020d8:	429a      	cmp	r2, r3
 80020da:	d10a      	bne.n	80020f2 <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	6852      	ldr	r2, [r2, #4]
 80020e6:	4914      	ldr	r1, [pc, #80]	; (8002138 <UART_AdvFeatureConfig+0x150>)
 80020e8:	4011      	ands	r1, r2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80020ee:	430a      	orrs	r2, r1
 80020f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	2280      	movs	r2, #128	; 0x80
 80020f8:	4013      	ands	r3, r2
 80020fa:	d00a      	beq.n	8002112 <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	6852      	ldr	r2, [r2, #4]
 8002106:	490d      	ldr	r1, [pc, #52]	; (800213c <UART_AdvFeatureConfig+0x154>)
 8002108:	4011      	ands	r1, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800210e:	430a      	orrs	r2, r1
 8002110:	605a      	str	r2, [r3, #4]
  }
}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	46bd      	mov	sp, r7
 8002116:	b002      	add	sp, #8
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	fffdffff 	.word	0xfffdffff
 8002120:	fffeffff 	.word	0xfffeffff
 8002124:	fffbffff 	.word	0xfffbffff
 8002128:	ffff7fff 	.word	0xffff7fff
 800212c:	ffffefff 	.word	0xffffefff
 8002130:	ffffdfff 	.word	0xffffdfff
 8002134:	ffefffff 	.word	0xffefffff
 8002138:	ff9fffff 	.word	0xff9fffff
 800213c:	fff7ffff 	.word	0xfff7ffff

08002140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2269      	movs	r2, #105	; 0x69
 8002152:	2120      	movs	r1, #32
 8002154:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	226a      	movs	r2, #106	; 0x6a
 800215a:	2120      	movs	r1, #32
 800215c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2268      	movs	r2, #104	; 0x68
 8002162:	2100      	movs	r1, #0
 8002164:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b002      	add	sp, #8
 800216e:	bd80      	pop	{r7, pc}

08002170 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	1dfb      	adds	r3, r7, #7
 800217e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002180:	e02b      	b.n	80021da <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	3301      	adds	r3, #1
 8002186:	d028      	beq.n	80021da <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d007      	beq.n	800219e <UART_WaitOnFlagUntilTimeout+0x2e>
 800218e:	f7fe f883 	bl	8000298 <HAL_GetTick>
 8002192:	0002      	movs	r2, r0
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	1ad2      	subs	r2, r2, r3
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	429a      	cmp	r2, r3
 800219c:	d91d      	bls.n	80021da <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	4916      	ldr	r1, [pc, #88]	; (8002204 <UART_WaitOnFlagUntilTimeout+0x94>)
 80021aa:	400a      	ands	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	6892      	ldr	r2, [r2, #8]
 80021b8:	2101      	movs	r1, #1
 80021ba:	438a      	bics	r2, r1
 80021bc:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2269      	movs	r2, #105	; 0x69
 80021c2:	2120      	movs	r1, #32
 80021c4:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	226a      	movs	r2, #106	; 0x6a
 80021ca:	2120      	movs	r1, #32
 80021cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2268      	movs	r2, #104	; 0x68
 80021d2:	2100      	movs	r1, #0
 80021d4:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e00f      	b.n	80021fa <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	401a      	ands	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	425a      	negs	r2, r3
 80021ea:	4153      	adcs	r3, r2
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	001a      	movs	r2, r3
 80021f0:	1dfb      	adds	r3, r7, #7
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d0c4      	beq.n	8002182 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	0018      	movs	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b004      	add	sp, #16
 8002200:	bd80      	pop	{r7, pc}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	fffffe5f 	.word	0xfffffe5f

08002208 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800220e:	f7fe f807 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002212:	f000 f91b 	bl	800244c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002216:	f000 fbaf 	bl	8002978 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800221a:	f000 fb75 	bl	8002908 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 800221e:	f000 f9ef 	bl	8002600 <MX_TIM14_Init>
  MX_TIM16_Init();
 8002222:	f000 fa49 	bl	80026b8 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002226:	f000 fadb 	bl	80027e0 <MX_TIM17_Init>
  MX_TIM3_Init();
 800222a:	f000 f981 	bl	8002530 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800222e:	4b80      	ldr	r3, [pc, #512]	; (8002430 <main+0x228>)
 8002230:	210c      	movs	r1, #12
 8002232:	0018      	movs	r0, r3
 8002234:	f7ff f828 	bl	8001288 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8002238:	4b7e      	ldr	r3, [pc, #504]	; (8002434 <main+0x22c>)
 800223a:	2100      	movs	r1, #0
 800223c:	0018      	movs	r0, r3
 800223e:	f7ff f823 	bl	8001288 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8002242:	4b7d      	ldr	r3, [pc, #500]	; (8002438 <main+0x230>)
 8002244:	2100      	movs	r1, #0
 8002246:	0018      	movs	r0, r3
 8002248:	f7ff f81e 	bl	8001288 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800224c:	4b7b      	ldr	r3, [pc, #492]	; (800243c <main+0x234>)
 800224e:	2100      	movs	r1, #0
 8002250:	0018      	movs	r0, r3
 8002252:	f7ff f819 	bl	8001288 <HAL_TIM_PWM_Start>


  /* USER CODE END 2 */
  int giro = 27;
 8002256:	231b      	movs	r3, #27
 8002258:	617b      	str	r3, [r7, #20]
  int altura = 55;
 800225a:	2337      	movs	r3, #55	; 0x37
 800225c:	613b      	str	r3, [r7, #16]
  int comprimento = 66;
 800225e:	2342      	movs	r3, #66	; 0x42
 8002260:	60fb      	str	r3, [r7, #12]
  int garra = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]

  	htim14.Instance->CCR1 = giro;
 8002266:	4b73      	ldr	r3, [pc, #460]	; (8002434 <main+0x22c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	635a      	str	r2, [r3, #52]	; 0x34
    htim16.Instance->CCR1 = altura;
 800226e:	4b72      	ldr	r3, [pc, #456]	; (8002438 <main+0x230>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	635a      	str	r2, [r3, #52]	; 0x34
    htim17.Instance->CCR1 = comprimento;
 8002276:	4b71      	ldr	r3, [pc, #452]	; (800243c <main+0x234>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = garra;
 800227e:	4b6c      	ldr	r3, [pc, #432]	; (8002430 <main+0x228>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
    char valor;
	char comando[] = "b";
 8002286:	003b      	movs	r3, r7
 8002288:	2262      	movs	r2, #98	; 0x62
 800228a:	801a      	strh	r2, [r3, #0]
	unsigned char *p2;
	p2 = &comando;
 800228c:	003b      	movs	r3, r7
 800228e:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		*p2 = "b";
 8002290:	4b6b      	ldr	r3, [pc, #428]	; (8002440 <main+0x238>)
 8002292:	b2da      	uxtb	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	701a      	strb	r2, [r3, #0]
	     HAL_UART_Receive(&huart1, p2, 1, 2000);
 8002298:	23fa      	movs	r3, #250	; 0xfa
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4869      	ldr	r0, [pc, #420]	; (8002444 <main+0x23c>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	f7ff fc75 	bl	8001b90 <HAL_UART_Receive>
	     valor = *p2;
 80022a6:	1cfb      	adds	r3, r7, #3
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	7812      	ldrb	r2, [r2, #0]
 80022ac:	701a      	strb	r2, [r3, #0]
	     /* USER CODE END WHILE */
	     switch (valor){
 80022ae:	1cfb      	adds	r3, r7, #3
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	3b30      	subs	r3, #48	; 0x30
 80022b4:	2b09      	cmp	r3, #9
 80022b6:	d8eb      	bhi.n	8002290 <main+0x88>
 80022b8:	009a      	lsls	r2, r3, #2
 80022ba:	4b63      	ldr	r3, [pc, #396]	; (8002448 <main+0x240>)
 80022bc:	18d3      	adds	r3, r2, r3
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	469f      	mov	pc, r3

	     case '1':
	    	 if(giro < 124){
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2b7b      	cmp	r3, #123	; 0x7b
 80022c6:	dd00      	ble.n	80022ca <main+0xc2>
 80022c8:	e0a1      	b.n	800240e <main+0x206>
	    		 giro += 5;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3305      	adds	r3, #5
 80022ce:	617b      	str	r3, [r7, #20]
	    		 htim14.Instance->CCR1 = giro;
 80022d0:	4b58      	ldr	r3, [pc, #352]	; (8002434 <main+0x22c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	635a      	str	r2, [r3, #52]	; 0x34
	    		 HAL_Delay(10);
 80022d8:	200a      	movs	r0, #10
 80022da:	f7fd ffe7 	bl	80002ac <HAL_Delay>
	    	 }
	    	 break;
 80022de:	e096      	b.n	800240e <main+0x206>

	     case '2':
	    	 if(giro > 27){
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2b1b      	cmp	r3, #27
 80022e4:	dc00      	bgt.n	80022e8 <main+0xe0>
 80022e6:	e094      	b.n	8002412 <main+0x20a>
	    		 giro -= 5;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	3b05      	subs	r3, #5
 80022ec:	617b      	str	r3, [r7, #20]
	    		 htim14.Instance->CCR1 = giro;
 80022ee:	4b51      	ldr	r3, [pc, #324]	; (8002434 <main+0x22c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	635a      	str	r2, [r3, #52]	; 0x34
	    		 HAL_Delay(10);
 80022f6:	200a      	movs	r0, #10
 80022f8:	f7fd ffd8 	bl	80002ac <HAL_Delay>
	    	 }
	     	 break;
 80022fc:	e089      	b.n	8002412 <main+0x20a>

	     case '3':
			 if(altura < 70){
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	2b45      	cmp	r3, #69	; 0x45
 8002302:	dd00      	ble.n	8002306 <main+0xfe>
 8002304:	e087      	b.n	8002416 <main+0x20e>
				 altura += 5;
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	3305      	adds	r3, #5
 800230a:	613b      	str	r3, [r7, #16]
				 htim16.Instance->CCR1 = altura;
 800230c:	4b4a      	ldr	r3, [pc, #296]	; (8002438 <main+0x230>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	635a      	str	r2, [r3, #52]	; 0x34
				 HAL_Delay(10);
 8002314:	200a      	movs	r0, #10
 8002316:	f7fd ffc9 	bl	80002ac <HAL_Delay>
			 }
			 break;
 800231a:	e07c      	b.n	8002416 <main+0x20e>

	     case '4':
			 if(altura > 55){
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	2b37      	cmp	r3, #55	; 0x37
 8002320:	dc00      	bgt.n	8002324 <main+0x11c>
 8002322:	e07a      	b.n	800241a <main+0x212>
				 altura -= 5;
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	3b05      	subs	r3, #5
 8002328:	613b      	str	r3, [r7, #16]
				 htim16.Instance->CCR1 = altura;
 800232a:	4b43      	ldr	r3, [pc, #268]	; (8002438 <main+0x230>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	635a      	str	r2, [r3, #52]	; 0x34
				 HAL_Delay(10);
 8002332:	200a      	movs	r0, #10
 8002334:	f7fd ffba 	bl	80002ac <HAL_Delay>
			 }
			 break;
 8002338:	e06f      	b.n	800241a <main+0x212>

	     case '5':
			 if(comprimento < 88){
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b57      	cmp	r3, #87	; 0x57
 800233e:	dc6e      	bgt.n	800241e <main+0x216>
				 comprimento += 5;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3305      	adds	r3, #5
 8002344:	60fb      	str	r3, [r7, #12]
				 htim17.Instance->CCR1 = comprimento;
 8002346:	4b3d      	ldr	r3, [pc, #244]	; (800243c <main+0x234>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	635a      	str	r2, [r3, #52]	; 0x34
				 HAL_Delay(10);
 800234e:	200a      	movs	r0, #10
 8002350:	f7fd ffac 	bl	80002ac <HAL_Delay>
			 }
			 break;
 8002354:	e063      	b.n	800241e <main+0x216>

	     case '6':
			 if(comprimento > 66){
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b42      	cmp	r3, #66	; 0x42
 800235a:	dd62      	ble.n	8002422 <main+0x21a>
				 comprimento -= 5;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3b05      	subs	r3, #5
 8002360:	60fb      	str	r3, [r7, #12]
				 htim17.Instance->CCR1 = comprimento;
 8002362:	4b36      	ldr	r3, [pc, #216]	; (800243c <main+0x234>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	635a      	str	r2, [r3, #52]	; 0x34
				 HAL_Delay(10);
 800236a:	200a      	movs	r0, #10
 800236c:	f7fd ff9e 	bl	80002ac <HAL_Delay>
			 }
			 break;
 8002370:	e057      	b.n	8002422 <main+0x21a>

	     case '7':
			 if(garra < 88){
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b57      	cmp	r3, #87	; 0x57
 8002376:	dc56      	bgt.n	8002426 <main+0x21e>
				 garra += 5;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	3305      	adds	r3, #5
 800237c:	60bb      	str	r3, [r7, #8]
				 htim3.Instance->CCR4 = garra;
 800237e:	4b2c      	ldr	r3, [pc, #176]	; (8002430 <main+0x228>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	641a      	str	r2, [r3, #64]	; 0x40
				 HAL_Delay(10);
 8002386:	200a      	movs	r0, #10
 8002388:	f7fd ff90 	bl	80002ac <HAL_Delay>
			 }
			 break;
 800238c:	e04b      	b.n	8002426 <main+0x21e>

		 case '8':
			 if(garra > 66){
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b42      	cmp	r3, #66	; 0x42
 8002392:	dd4a      	ble.n	800242a <main+0x222>
				 garra -= 5;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	3b05      	subs	r3, #5
 8002398:	60bb      	str	r3, [r7, #8]
				 htim3.Instance->CCR4 = garra;
 800239a:	4b25      	ldr	r3, [pc, #148]	; (8002430 <main+0x228>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
				 HAL_Delay(10);
 80023a2:	200a      	movs	r0, #10
 80023a4:	f7fd ff82 	bl	80002ac <HAL_Delay>
			 }
			 break;
 80023a8:	e03f      	b.n	800242a <main+0x222>

		 case '9':
			 	giro = 27;
 80023aa:	231b      	movs	r3, #27
 80023ac:	617b      	str	r3, [r7, #20]
			 	altura = 55;
 80023ae:	2337      	movs	r3, #55	; 0x37
 80023b0:	613b      	str	r3, [r7, #16]
			 	comprimento = 66;
 80023b2:	2342      	movs	r3, #66	; 0x42
 80023b4:	60fb      	str	r3, [r7, #12]
			 	garra = 50;
 80023b6:	2332      	movs	r3, #50	; 0x32
 80023b8:	60bb      	str	r3, [r7, #8]
				htim14.Instance->CCR1 = giro;
 80023ba:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <main+0x22c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	635a      	str	r2, [r3, #52]	; 0x34
				htim16.Instance->CCR1 = altura;
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <main+0x230>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	635a      	str	r2, [r3, #52]	; 0x34
				htim17.Instance->CCR1 = comprimento;
 80023ca:	4b1c      	ldr	r3, [pc, #112]	; (800243c <main+0x234>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	635a      	str	r2, [r3, #52]	; 0x34
				htim3.Instance->CCR4 = garra;
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <main+0x228>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80023da:	e027      	b.n	800242c <main+0x224>

		 case '0':
				giro = 124;
 80023dc:	237c      	movs	r3, #124	; 0x7c
 80023de:	617b      	str	r3, [r7, #20]
				altura = 70;
 80023e0:	2346      	movs	r3, #70	; 0x46
 80023e2:	613b      	str	r3, [r7, #16]
				comprimento = 88;
 80023e4:	2358      	movs	r3, #88	; 0x58
 80023e6:	60fb      	str	r3, [r7, #12]
				garra = 60;
 80023e8:	233c      	movs	r3, #60	; 0x3c
 80023ea:	60bb      	str	r3, [r7, #8]
				htim14.Instance->CCR1 = giro;
 80023ec:	4b11      	ldr	r3, [pc, #68]	; (8002434 <main+0x22c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	635a      	str	r2, [r3, #52]	; 0x34
				htim16.Instance->CCR1 = altura;
 80023f4:	4b10      	ldr	r3, [pc, #64]	; (8002438 <main+0x230>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	635a      	str	r2, [r3, #52]	; 0x34
				htim17.Instance->CCR1 = comprimento;
 80023fc:	4b0f      	ldr	r3, [pc, #60]	; (800243c <main+0x234>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	635a      	str	r2, [r3, #52]	; 0x34
				htim3.Instance->CCR4 = garra;
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <main+0x228>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	641a      	str	r2, [r3, #64]	; 0x40
		 	 break;
 800240c:	e00e      	b.n	800242c <main+0x224>
	    	 break;
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	e73e      	b.n	8002290 <main+0x88>
	     	 break;
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	e73c      	b.n	8002290 <main+0x88>
			 break;
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	e73a      	b.n	8002290 <main+0x88>
			 break;
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	e738      	b.n	8002290 <main+0x88>
			 break;
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	e736      	b.n	8002290 <main+0x88>
			 break;
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	e734      	b.n	8002290 <main+0x88>
			 break;
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	e732      	b.n	8002290 <main+0x88>
			 break;
 800242a:	46c0      	nop			; (mov r8, r8)
		*p2 = "b";
 800242c:	e730      	b.n	8002290 <main+0x88>
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	20000064 	.word	0x20000064
 8002434:	20000114 	.word	0x20000114
 8002438:	20000154 	.word	0x20000154
 800243c:	20000024 	.word	0x20000024
 8002440:	08002e6c 	.word	0x08002e6c
 8002444:	200000a4 	.word	0x200000a4
 8002448:	08002e80 	.word	0x08002e80

0800244c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b094      	sub	sp, #80	; 0x50
 8002450:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002452:	2320      	movs	r3, #32
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	2202      	movs	r2, #2
 8002458:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800245a:	2320      	movs	r3, #32
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	2201      	movs	r2, #1
 8002460:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002462:	2320      	movs	r3, #32
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	2210      	movs	r2, #16
 8002468:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800246a:	2320      	movs	r3, #32
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	2200      	movs	r2, #0
 8002470:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002472:	2320      	movs	r3, #32
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	0018      	movs	r0, r3
 8002478:	f7fe f986 	bl	8000788 <HAL_RCC_OscConfig>
 800247c:	1e03      	subs	r3, r0, #0
 800247e:	d007      	beq.n	8002490 <SystemClock_Config+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002480:	230c      	movs	r3, #12
 8002482:	33ff      	adds	r3, #255	; 0xff
 8002484:	001a      	movs	r2, r3
 8002486:	4b29      	ldr	r3, [pc, #164]	; (800252c <SystemClock_Config+0xe0>)
 8002488:	0011      	movs	r1, r2
 800248a:	0018      	movs	r0, r3
 800248c:	f000 fa9a 	bl	80029c4 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002490:	2310      	movs	r3, #16
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	2207      	movs	r2, #7
 8002496:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002498:	2310      	movs	r3, #16
 800249a:	18fb      	adds	r3, r7, r3
 800249c:	2200      	movs	r2, #0
 800249e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024a0:	2310      	movs	r3, #16
 80024a2:	18fb      	adds	r3, r7, r3
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024a8:	2310      	movs	r3, #16
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	2200      	movs	r2, #0
 80024ae:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80024b0:	2310      	movs	r3, #16
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	2100      	movs	r1, #0
 80024b6:	0018      	movs	r0, r3
 80024b8:	f7fe fc5a 	bl	8000d70 <HAL_RCC_ClockConfig>
 80024bc:	1e03      	subs	r3, r0, #0
 80024be:	d006      	beq.n	80024ce <SystemClock_Config+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
 80024c0:	238c      	movs	r3, #140	; 0x8c
 80024c2:	005a      	lsls	r2, r3, #1
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <SystemClock_Config+0xe0>)
 80024c6:	0011      	movs	r1, r2
 80024c8:	0018      	movs	r0, r3
 80024ca:	f000 fa7b 	bl	80029c4 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024ce:	003b      	movs	r3, r7
 80024d0:	2201      	movs	r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80024d4:	003b      	movs	r3, r7
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024da:	003b      	movs	r3, r7
 80024dc:	0018      	movs	r0, r3
 80024de:	f7fe fdad 	bl	800103c <HAL_RCCEx_PeriphCLKConfig>
 80024e2:	1e03      	subs	r3, r0, #0
 80024e4:	d007      	beq.n	80024f6 <SystemClock_Config+0xaa>
  {
    _Error_Handler(__FILE__, __LINE__);
 80024e6:	2320      	movs	r3, #32
 80024e8:	33ff      	adds	r3, #255	; 0xff
 80024ea:	001a      	movs	r2, r3
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <SystemClock_Config+0xe0>)
 80024ee:	0011      	movs	r1, r2
 80024f0:	0018      	movs	r0, r3
 80024f2:	f000 fa67 	bl	80029c4 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80024f6:	f7fe fd81 	bl	8000ffc <HAL_RCC_GetHCLKFreq>
 80024fa:	0002      	movs	r2, r0
 80024fc:	23fa      	movs	r3, #250	; 0xfa
 80024fe:	0099      	lsls	r1, r3, #2
 8002500:	0010      	movs	r0, r2
 8002502:	f7fd fe01 	bl	8000108 <__udivsi3>
 8002506:	0003      	movs	r3, r0
 8002508:	0018      	movs	r0, r3
 800250a:	f7fd ff95 	bl	8000438 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800250e:	2004      	movs	r0, #4
 8002510:	f7fd ffa0 	bl	8000454 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002514:	2301      	movs	r3, #1
 8002516:	425b      	negs	r3, r3
 8002518:	2200      	movs	r2, #0
 800251a:	2100      	movs	r1, #0
 800251c:	0018      	movs	r0, r3
 800251e:	f7fd ff75 	bl	800040c <HAL_NVIC_SetPriority>
}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	46bd      	mov	sp, r7
 8002526:	b014      	add	sp, #80	; 0x50
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	08002e70 	.word	0x08002e70

08002530 <MX_TIM3_Init>:

/* TIM3 init function */
static void MX_TIM3_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 8002536:	4b2e      	ldr	r3, [pc, #184]	; (80025f0 <MX_TIM3_Init+0xc0>)
 8002538:	4a2e      	ldr	r2, [pc, #184]	; (80025f4 <MX_TIM3_Init+0xc4>)
 800253a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 159;
 800253c:	4b2c      	ldr	r3, [pc, #176]	; (80025f0 <MX_TIM3_Init+0xc0>)
 800253e:	229f      	movs	r2, #159	; 0x9f
 8002540:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002542:	4b2b      	ldr	r3, [pc, #172]	; (80025f0 <MX_TIM3_Init+0xc0>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002548:	4b29      	ldr	r3, [pc, #164]	; (80025f0 <MX_TIM3_Init+0xc0>)
 800254a:	4a2b      	ldr	r2, [pc, #172]	; (80025f8 <MX_TIM3_Init+0xc8>)
 800254c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800254e:	4b28      	ldr	r3, [pc, #160]	; (80025f0 <MX_TIM3_Init+0xc0>)
 8002550:	2200      	movs	r2, #0
 8002552:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002554:	4b26      	ldr	r3, [pc, #152]	; (80025f0 <MX_TIM3_Init+0xc0>)
 8002556:	2200      	movs	r2, #0
 8002558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800255a:	4b25      	ldr	r3, [pc, #148]	; (80025f0 <MX_TIM3_Init+0xc0>)
 800255c:	0018      	movs	r0, r3
 800255e:	f7fe fe67 	bl	8001230 <HAL_TIM_PWM_Init>
 8002562:	1e03      	subs	r3, r0, #0
 8002564:	d007      	beq.n	8002576 <MX_TIM3_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002566:	233e      	movs	r3, #62	; 0x3e
 8002568:	33ff      	adds	r3, #255	; 0xff
 800256a:	001a      	movs	r2, r3
 800256c:	4b23      	ldr	r3, [pc, #140]	; (80025fc <MX_TIM3_Init+0xcc>)
 800256e:	0011      	movs	r1, r2
 8002570:	0018      	movs	r0, r3
 8002572:	f000 fa27 	bl	80029c4 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002576:	2320      	movs	r3, #32
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800257e:	2320      	movs	r3, #32
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	2200      	movs	r2, #0
 8002584:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002586:	2320      	movs	r3, #32
 8002588:	18fa      	adds	r2, r7, r3
 800258a:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <MX_TIM3_Init+0xc0>)
 800258c:	0011      	movs	r1, r2
 800258e:	0018      	movs	r0, r3
 8002590:	f7ff f9f5 	bl	800197e <HAL_TIMEx_MasterConfigSynchronization>
 8002594:	1e03      	subs	r3, r0, #0
 8002596:	d006      	beq.n	80025a6 <MX_TIM3_Init+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002598:	23a2      	movs	r3, #162	; 0xa2
 800259a:	005a      	lsls	r2, r3, #1
 800259c:	4b17      	ldr	r3, [pc, #92]	; (80025fc <MX_TIM3_Init+0xcc>)
 800259e:	0011      	movs	r1, r2
 80025a0:	0018      	movs	r0, r3
 80025a2:	f000 fa0f 	bl	80029c4 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025a6:	1d3b      	adds	r3, r7, #4
 80025a8:	2260      	movs	r2, #96	; 0x60
 80025aa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	2200      	movs	r2, #0
 80025b0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025b8:	1d3b      	adds	r3, r7, #4
 80025ba:	2200      	movs	r2, #0
 80025bc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025be:	1d39      	adds	r1, r7, #4
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <MX_TIM3_Init+0xc0>)
 80025c2:	220c      	movs	r2, #12
 80025c4:	0018      	movs	r0, r3
 80025c6:	f7fe fe9b 	bl	8001300 <HAL_TIM_PWM_ConfigChannel>
 80025ca:	1e03      	subs	r3, r0, #0
 80025cc:	d007      	beq.n	80025de <MX_TIM3_Init+0xae>
  {
    _Error_Handler(__FILE__, __LINE__);
 80025ce:	234e      	movs	r3, #78	; 0x4e
 80025d0:	33ff      	adds	r3, #255	; 0xff
 80025d2:	001a      	movs	r2, r3
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <MX_TIM3_Init+0xcc>)
 80025d6:	0011      	movs	r1, r2
 80025d8:	0018      	movs	r0, r3
 80025da:	f000 f9f3 	bl	80029c4 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 80025de:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <MX_TIM3_Init+0xc0>)
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 fa89 	bl	8002af8 <HAL_TIM_MspPostInit>

}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b00a      	add	sp, #40	; 0x28
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	20000064 	.word	0x20000064
 80025f4:	40000400 	.word	0x40000400
 80025f8:	000003e7 	.word	0x000003e7
 80025fc:	08002e70 	.word	0x08002e70

08002600 <MX_TIM14_Init>:

/* TIM14 init function */
static void MX_TIM14_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0

  TIM_OC_InitTypeDef sConfigOC;

  htim14.Instance = TIM14;
 8002606:	4b28      	ldr	r3, [pc, #160]	; (80026a8 <MX_TIM14_Init+0xa8>)
 8002608:	4a28      	ldr	r2, [pc, #160]	; (80026ac <MX_TIM14_Init+0xac>)
 800260a:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 159;
 800260c:	4b26      	ldr	r3, [pc, #152]	; (80026a8 <MX_TIM14_Init+0xa8>)
 800260e:	229f      	movs	r2, #159	; 0x9f
 8002610:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002612:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <MX_TIM14_Init+0xa8>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 8002618:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <MX_TIM14_Init+0xa8>)
 800261a:	4a25      	ldr	r2, [pc, #148]	; (80026b0 <MX_TIM14_Init+0xb0>)
 800261c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261e:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <MX_TIM14_Init+0xa8>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002624:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <MX_TIM14_Init+0xa8>)
 8002626:	2200      	movs	r2, #0
 8002628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800262a:	4b1f      	ldr	r3, [pc, #124]	; (80026a8 <MX_TIM14_Init+0xa8>)
 800262c:	0018      	movs	r0, r3
 800262e:	f7fe fdd3 	bl	80011d8 <HAL_TIM_Base_Init>
 8002632:	1e03      	subs	r3, r0, #0
 8002634:	d006      	beq.n	8002644 <MX_TIM14_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002636:	23b1      	movs	r3, #177	; 0xb1
 8002638:	005a      	lsls	r2, r3, #1
 800263a:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <MX_TIM14_Init+0xb4>)
 800263c:	0011      	movs	r1, r2
 800263e:	0018      	movs	r0, r3
 8002640:	f000 f9c0 	bl	80029c4 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002644:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <MX_TIM14_Init+0xa8>)
 8002646:	0018      	movs	r0, r3
 8002648:	f7fe fdf2 	bl	8001230 <HAL_TIM_PWM_Init>
 800264c:	1e03      	subs	r3, r0, #0
 800264e:	d007      	beq.n	8002660 <MX_TIM14_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002650:	2368      	movs	r3, #104	; 0x68
 8002652:	33ff      	adds	r3, #255	; 0xff
 8002654:	001a      	movs	r2, r3
 8002656:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <MX_TIM14_Init+0xb4>)
 8002658:	0011      	movs	r1, r2
 800265a:	0018      	movs	r0, r3
 800265c:	f000 f9b2 	bl	80029c4 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002660:	1d3b      	adds	r3, r7, #4
 8002662:	2260      	movs	r2, #96	; 0x60
 8002664:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	2200      	movs	r2, #0
 800266a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002678:	1d39      	adds	r1, r7, #4
 800267a:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <MX_TIM14_Init+0xa8>)
 800267c:	2200      	movs	r2, #0
 800267e:	0018      	movs	r0, r3
 8002680:	f7fe fe3e 	bl	8001300 <HAL_TIM_PWM_ConfigChannel>
 8002684:	1e03      	subs	r3, r0, #0
 8002686:	d006      	beq.n	8002696 <MX_TIM14_Init+0x96>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002688:	23b8      	movs	r3, #184	; 0xb8
 800268a:	005a      	lsls	r2, r3, #1
 800268c:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <MX_TIM14_Init+0xb4>)
 800268e:	0011      	movs	r1, r2
 8002690:	0018      	movs	r0, r3
 8002692:	f000 f997 	bl	80029c4 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim14);
 8002696:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <MX_TIM14_Init+0xa8>)
 8002698:	0018      	movs	r0, r3
 800269a:	f000 fa2d 	bl	8002af8 <HAL_TIM_MspPostInit>

}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	46bd      	mov	sp, r7
 80026a2:	b008      	add	sp, #32
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	20000114 	.word	0x20000114
 80026ac:	40002000 	.word	0x40002000
 80026b0:	000003e7 	.word	0x000003e7
 80026b4:	08002e70 	.word	0x08002e70

080026b8 <MX_TIM16_Init>:

/* TIM16 init function */
static void MX_TIM16_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08e      	sub	sp, #56	; 0x38
 80026bc:	af00      	add	r7, sp, #0

  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim16.Instance = TIM16;
 80026be:	4b44      	ldr	r3, [pc, #272]	; (80027d0 <MX_TIM16_Init+0x118>)
 80026c0:	4a44      	ldr	r2, [pc, #272]	; (80027d4 <MX_TIM16_Init+0x11c>)
 80026c2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 159;
 80026c4:	4b42      	ldr	r3, [pc, #264]	; (80027d0 <MX_TIM16_Init+0x118>)
 80026c6:	229f      	movs	r2, #159	; 0x9f
 80026c8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ca:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <MX_TIM16_Init+0x118>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 80026d0:	4b3f      	ldr	r3, [pc, #252]	; (80027d0 <MX_TIM16_Init+0x118>)
 80026d2:	4a41      	ldr	r2, [pc, #260]	; (80027d8 <MX_TIM16_Init+0x120>)
 80026d4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d6:	4b3e      	ldr	r3, [pc, #248]	; (80027d0 <MX_TIM16_Init+0x118>)
 80026d8:	2200      	movs	r2, #0
 80026da:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80026dc:	4b3c      	ldr	r3, [pc, #240]	; (80027d0 <MX_TIM16_Init+0x118>)
 80026de:	2200      	movs	r2, #0
 80026e0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e2:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <MX_TIM16_Init+0x118>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80026e8:	4b39      	ldr	r3, [pc, #228]	; (80027d0 <MX_TIM16_Init+0x118>)
 80026ea:	0018      	movs	r0, r3
 80026ec:	f7fe fd74 	bl	80011d8 <HAL_TIM_Base_Init>
 80026f0:	1e03      	subs	r3, r0, #0
 80026f2:	d007      	beq.n	8002704 <MX_TIM16_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80026f4:	2388      	movs	r3, #136	; 0x88
 80026f6:	33ff      	adds	r3, #255	; 0xff
 80026f8:	001a      	movs	r2, r3
 80026fa:	4b38      	ldr	r3, [pc, #224]	; (80027dc <MX_TIM16_Init+0x124>)
 80026fc:	0011      	movs	r1, r2
 80026fe:	0018      	movs	r0, r3
 8002700:	f000 f960 	bl	80029c4 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002704:	4b32      	ldr	r3, [pc, #200]	; (80027d0 <MX_TIM16_Init+0x118>)
 8002706:	0018      	movs	r0, r3
 8002708:	f7fe fd92 	bl	8001230 <HAL_TIM_PWM_Init>
 800270c:	1e03      	subs	r3, r0, #0
 800270e:	d006      	beq.n	800271e <MX_TIM16_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002710:	23c6      	movs	r3, #198	; 0xc6
 8002712:	005a      	lsls	r2, r3, #1
 8002714:	4b31      	ldr	r3, [pc, #196]	; (80027dc <MX_TIM16_Init+0x124>)
 8002716:	0011      	movs	r1, r2
 8002718:	0018      	movs	r0, r3
 800271a:	f000 f953 	bl	80029c4 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800271e:	231c      	movs	r3, #28
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	2260      	movs	r2, #96	; 0x60
 8002724:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002726:	231c      	movs	r3, #28
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	2200      	movs	r2, #0
 800272c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800272e:	231c      	movs	r3, #28
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002736:	231c      	movs	r3, #28
 8002738:	18fb      	adds	r3, r7, r3
 800273a:	2200      	movs	r2, #0
 800273c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800273e:	231c      	movs	r3, #28
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	2200      	movs	r2, #0
 8002744:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002746:	231c      	movs	r3, #28
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	2200      	movs	r2, #0
 800274c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800274e:	231c      	movs	r3, #28
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	2200      	movs	r2, #0
 8002754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002756:	231c      	movs	r3, #28
 8002758:	18f9      	adds	r1, r7, r3
 800275a:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <MX_TIM16_Init+0x118>)
 800275c:	2200      	movs	r2, #0
 800275e:	0018      	movs	r0, r3
 8002760:	f7fe fdce 	bl	8001300 <HAL_TIM_PWM_ConfigChannel>
 8002764:	1e03      	subs	r3, r0, #0
 8002766:	d006      	beq.n	8002776 <MX_TIM16_Init+0xbe>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002768:	23cc      	movs	r3, #204	; 0xcc
 800276a:	005a      	lsls	r2, r3, #1
 800276c:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <MX_TIM16_Init+0x124>)
 800276e:	0011      	movs	r1, r2
 8002770:	0018      	movs	r0, r3
 8002772:	f000 f927 	bl	80029c4 <_Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002776:	003b      	movs	r3, r7
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800277c:	003b      	movs	r3, r7
 800277e:	2200      	movs	r2, #0
 8002780:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002782:	003b      	movs	r3, r7
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002788:	003b      	movs	r3, r7
 800278a:	2200      	movs	r2, #0
 800278c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800278e:	003b      	movs	r3, r7
 8002790:	2200      	movs	r2, #0
 8002792:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002794:	003b      	movs	r3, r7
 8002796:	2280      	movs	r2, #128	; 0x80
 8002798:	0192      	lsls	r2, r2, #6
 800279a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800279c:	003b      	movs	r3, r7
 800279e:	2200      	movs	r2, #0
 80027a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80027a2:	003a      	movs	r2, r7
 80027a4:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <MX_TIM16_Init+0x118>)
 80027a6:	0011      	movs	r1, r2
 80027a8:	0018      	movs	r0, r3
 80027aa:	f7ff f92b 	bl	8001a04 <HAL_TIMEx_ConfigBreakDeadTime>
 80027ae:	1e03      	subs	r3, r0, #0
 80027b0:	d006      	beq.n	80027c0 <MX_TIM16_Init+0x108>
  {
    _Error_Handler(__FILE__, __LINE__);
 80027b2:	23d2      	movs	r3, #210	; 0xd2
 80027b4:	005a      	lsls	r2, r3, #1
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <MX_TIM16_Init+0x124>)
 80027b8:	0011      	movs	r1, r2
 80027ba:	0018      	movs	r0, r3
 80027bc:	f000 f902 	bl	80029c4 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim16);
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <MX_TIM16_Init+0x118>)
 80027c2:	0018      	movs	r0, r3
 80027c4:	f000 f998 	bl	8002af8 <HAL_TIM_MspPostInit>

}
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b00e      	add	sp, #56	; 0x38
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000154 	.word	0x20000154
 80027d4:	40014400 	.word	0x40014400
 80027d8:	000003e7 	.word	0x000003e7
 80027dc:	08002e70 	.word	0x08002e70

080027e0 <MX_TIM17_Init>:

/* TIM17 init function */
static void MX_TIM17_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08e      	sub	sp, #56	; 0x38
 80027e4:	af00      	add	r7, sp, #0

  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim17.Instance = TIM17;
 80027e6:	4b44      	ldr	r3, [pc, #272]	; (80028f8 <MX_TIM17_Init+0x118>)
 80027e8:	4a44      	ldr	r2, [pc, #272]	; (80028fc <MX_TIM17_Init+0x11c>)
 80027ea:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 159;
 80027ec:	4b42      	ldr	r3, [pc, #264]	; (80028f8 <MX_TIM17_Init+0x118>)
 80027ee:	229f      	movs	r2, #159	; 0x9f
 80027f0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f2:	4b41      	ldr	r3, [pc, #260]	; (80028f8 <MX_TIM17_Init+0x118>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 80027f8:	4b3f      	ldr	r3, [pc, #252]	; (80028f8 <MX_TIM17_Init+0x118>)
 80027fa:	4a41      	ldr	r2, [pc, #260]	; (8002900 <MX_TIM17_Init+0x120>)
 80027fc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027fe:	4b3e      	ldr	r3, [pc, #248]	; (80028f8 <MX_TIM17_Init+0x118>)
 8002800:	2200      	movs	r2, #0
 8002802:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002804:	4b3c      	ldr	r3, [pc, #240]	; (80028f8 <MX_TIM17_Init+0x118>)
 8002806:	2200      	movs	r2, #0
 8002808:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800280a:	4b3b      	ldr	r3, [pc, #236]	; (80028f8 <MX_TIM17_Init+0x118>)
 800280c:	2200      	movs	r2, #0
 800280e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002810:	4b39      	ldr	r3, [pc, #228]	; (80028f8 <MX_TIM17_Init+0x118>)
 8002812:	0018      	movs	r0, r3
 8002814:	f7fe fce0 	bl	80011d8 <HAL_TIM_Base_Init>
 8002818:	1e03      	subs	r3, r0, #0
 800281a:	d007      	beq.n	800282c <MX_TIM17_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800281c:	23bc      	movs	r3, #188	; 0xbc
 800281e:	33ff      	adds	r3, #255	; 0xff
 8002820:	001a      	movs	r2, r3
 8002822:	4b38      	ldr	r3, [pc, #224]	; (8002904 <MX_TIM17_Init+0x124>)
 8002824:	0011      	movs	r1, r2
 8002826:	0018      	movs	r0, r3
 8002828:	f000 f8cc 	bl	80029c4 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800282c:	4b32      	ldr	r3, [pc, #200]	; (80028f8 <MX_TIM17_Init+0x118>)
 800282e:	0018      	movs	r0, r3
 8002830:	f7fe fcfe 	bl	8001230 <HAL_TIM_PWM_Init>
 8002834:	1e03      	subs	r3, r0, #0
 8002836:	d006      	beq.n	8002846 <MX_TIM17_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002838:	23e0      	movs	r3, #224	; 0xe0
 800283a:	005a      	lsls	r2, r3, #1
 800283c:	4b31      	ldr	r3, [pc, #196]	; (8002904 <MX_TIM17_Init+0x124>)
 800283e:	0011      	movs	r1, r2
 8002840:	0018      	movs	r0, r3
 8002842:	f000 f8bf 	bl	80029c4 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002846:	231c      	movs	r3, #28
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	2260      	movs	r2, #96	; 0x60
 800284c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800284e:	231c      	movs	r3, #28
 8002850:	18fb      	adds	r3, r7, r3
 8002852:	2200      	movs	r2, #0
 8002854:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002856:	231c      	movs	r3, #28
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800285e:	231c      	movs	r3, #28
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	2200      	movs	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002866:	231c      	movs	r3, #28
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	2200      	movs	r2, #0
 800286c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800286e:	231c      	movs	r3, #28
 8002870:	18fb      	adds	r3, r7, r3
 8002872:	2200      	movs	r2, #0
 8002874:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002876:	231c      	movs	r3, #28
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	2200      	movs	r2, #0
 800287c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800287e:	231c      	movs	r3, #28
 8002880:	18f9      	adds	r1, r7, r3
 8002882:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <MX_TIM17_Init+0x118>)
 8002884:	2200      	movs	r2, #0
 8002886:	0018      	movs	r0, r3
 8002888:	f7fe fd3a 	bl	8001300 <HAL_TIM_PWM_ConfigChannel>
 800288c:	1e03      	subs	r3, r0, #0
 800288e:	d006      	beq.n	800289e <MX_TIM17_Init+0xbe>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002890:	23e6      	movs	r3, #230	; 0xe6
 8002892:	005a      	lsls	r2, r3, #1
 8002894:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <MX_TIM17_Init+0x124>)
 8002896:	0011      	movs	r1, r2
 8002898:	0018      	movs	r0, r3
 800289a:	f000 f893 	bl	80029c4 <_Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800289e:	003b      	movs	r3, r7
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028a4:	003b      	movs	r3, r7
 80028a6:	2200      	movs	r2, #0
 80028a8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028aa:	003b      	movs	r3, r7
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028b0:	003b      	movs	r3, r7
 80028b2:	2200      	movs	r2, #0
 80028b4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028b6:	003b      	movs	r3, r7
 80028b8:	2200      	movs	r2, #0
 80028ba:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028bc:	003b      	movs	r3, r7
 80028be:	2280      	movs	r2, #128	; 0x80
 80028c0:	0192      	lsls	r2, r2, #6
 80028c2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028c4:	003b      	movs	r3, r7
 80028c6:	2200      	movs	r2, #0
 80028c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80028ca:	003a      	movs	r2, r7
 80028cc:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <MX_TIM17_Init+0x118>)
 80028ce:	0011      	movs	r1, r2
 80028d0:	0018      	movs	r0, r3
 80028d2:	f7ff f897 	bl	8001a04 <HAL_TIMEx_ConfigBreakDeadTime>
 80028d6:	1e03      	subs	r3, r0, #0
 80028d8:	d006      	beq.n	80028e8 <MX_TIM17_Init+0x108>
  {
    _Error_Handler(__FILE__, __LINE__);
 80028da:	23ec      	movs	r3, #236	; 0xec
 80028dc:	005a      	lsls	r2, r3, #1
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <MX_TIM17_Init+0x124>)
 80028e0:	0011      	movs	r1, r2
 80028e2:	0018      	movs	r0, r3
 80028e4:	f000 f86e 	bl	80029c4 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim17);
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <MX_TIM17_Init+0x118>)
 80028ea:	0018      	movs	r0, r3
 80028ec:	f000 f904 	bl	8002af8 <HAL_TIM_MspPostInit>

}
 80028f0:	46c0      	nop			; (mov r8, r8)
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b00e      	add	sp, #56	; 0x38
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000024 	.word	0x20000024
 80028fc:	40014800 	.word	0x40014800
 8002900:	000003e7 	.word	0x000003e7
 8002904:	08002e70 	.word	0x08002e70

08002908 <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800290c:	4b17      	ldr	r3, [pc, #92]	; (800296c <MX_USART1_UART_Init+0x64>)
 800290e:	4a18      	ldr	r2, [pc, #96]	; (8002970 <MX_USART1_UART_Init+0x68>)
 8002910:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002912:	4b16      	ldr	r3, [pc, #88]	; (800296c <MX_USART1_UART_Init+0x64>)
 8002914:	2296      	movs	r2, #150	; 0x96
 8002916:	0192      	lsls	r2, r2, #6
 8002918:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800291a:	4b14      	ldr	r3, [pc, #80]	; (800296c <MX_USART1_UART_Init+0x64>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002920:	4b12      	ldr	r3, [pc, #72]	; (800296c <MX_USART1_UART_Init+0x64>)
 8002922:	2200      	movs	r2, #0
 8002924:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002926:	4b11      	ldr	r3, [pc, #68]	; (800296c <MX_USART1_UART_Init+0x64>)
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <MX_USART1_UART_Init+0x64>)
 800292e:	220c      	movs	r2, #12
 8002930:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <MX_USART1_UART_Init+0x64>)
 8002934:	2200      	movs	r2, #0
 8002936:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <MX_USART1_UART_Init+0x64>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800293e:	4b0b      	ldr	r3, [pc, #44]	; (800296c <MX_USART1_UART_Init+0x64>)
 8002940:	2200      	movs	r2, #0
 8002942:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <MX_USART1_UART_Init+0x64>)
 8002946:	2200      	movs	r2, #0
 8002948:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <MX_USART1_UART_Init+0x64>)
 800294c:	0018      	movs	r0, r3
 800294e:	f7ff f8c7 	bl	8001ae0 <HAL_UART_Init>
 8002952:	1e03      	subs	r3, r0, #0
 8002954:	d007      	beq.n	8002966 <MX_USART1_UART_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002956:	23f0      	movs	r3, #240	; 0xf0
 8002958:	33ff      	adds	r3, #255	; 0xff
 800295a:	001a      	movs	r2, r3
 800295c:	4b05      	ldr	r3, [pc, #20]	; (8002974 <MX_USART1_UART_Init+0x6c>)
 800295e:	0011      	movs	r1, r2
 8002960:	0018      	movs	r0, r3
 8002962:	f000 f82f 	bl	80029c4 <_Error_Handler>
  }

}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	200000a4 	.word	0x200000a4
 8002970:	40013800 	.word	0x40013800
 8002974:	08002e70 	.word	0x08002e70

08002978 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800297e:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <MX_GPIO_Init+0x48>)
 8002980:	4a0f      	ldr	r2, [pc, #60]	; (80029c0 <MX_GPIO_Init+0x48>)
 8002982:	6952      	ldr	r2, [r2, #20]
 8002984:	2180      	movs	r1, #128	; 0x80
 8002986:	0289      	lsls	r1, r1, #10
 8002988:	430a      	orrs	r2, r1
 800298a:	615a      	str	r2, [r3, #20]
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <MX_GPIO_Init+0x48>)
 800298e:	695a      	ldr	r2, [r3, #20]
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	029b      	lsls	r3, r3, #10
 8002994:	4013      	ands	r3, r2
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800299a:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <MX_GPIO_Init+0x48>)
 800299c:	4a08      	ldr	r2, [pc, #32]	; (80029c0 <MX_GPIO_Init+0x48>)
 800299e:	6952      	ldr	r2, [r2, #20]
 80029a0:	2180      	movs	r1, #128	; 0x80
 80029a2:	02c9      	lsls	r1, r1, #11
 80029a4:	430a      	orrs	r2, r1
 80029a6:	615a      	str	r2, [r3, #20]
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <MX_GPIO_Init+0x48>)
 80029aa:	695a      	ldr	r2, [r3, #20]
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	02db      	lsls	r3, r3, #11
 80029b0:	4013      	ands	r3, r2
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]

}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b002      	add	sp, #8
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	40021000 	.word	0x40021000

080029c4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80029ce:	e7fe      	b.n	80029ce <_Error_Handler+0xa>

080029d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d6:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_MspInit+0x50>)
 80029d8:	4a11      	ldr	r2, [pc, #68]	; (8002a20 <HAL_MspInit+0x50>)
 80029da:	6992      	ldr	r2, [r2, #24]
 80029dc:	2101      	movs	r1, #1
 80029de:	430a      	orrs	r2, r1
 80029e0:	619a      	str	r2, [r3, #24]
 80029e2:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <HAL_MspInit+0x50>)
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2201      	movs	r2, #1
 80029e8:	4013      	ands	r3, r2
 80029ea:	607b      	str	r3, [r7, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80029ee:	2305      	movs	r3, #5
 80029f0:	425b      	negs	r3, r3
 80029f2:	2200      	movs	r2, #0
 80029f4:	2100      	movs	r1, #0
 80029f6:	0018      	movs	r0, r3
 80029f8:	f7fd fd08 	bl	800040c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80029fc:	2302      	movs	r3, #2
 80029fe:	425b      	negs	r3, r3
 8002a00:	2200      	movs	r2, #0
 8002a02:	2100      	movs	r1, #0
 8002a04:	0018      	movs	r0, r3
 8002a06:	f7fd fd01 	bl	800040c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	425b      	negs	r3, r3
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	0018      	movs	r0, r3
 8002a14:	f7fd fcfa 	bl	800040c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a18:	46c0      	nop			; (mov r8, r8)
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b002      	add	sp, #8
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40021000 	.word	0x40021000

08002a24 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM3)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a09      	ldr	r2, [pc, #36]	; (8002a58 <HAL_TIM_PWM_MspInit+0x34>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d10b      	bne.n	8002a4e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_TIM_PWM_MspInit+0x38>)
 8002a38:	4a08      	ldr	r2, [pc, #32]	; (8002a5c <HAL_TIM_PWM_MspInit+0x38>)
 8002a3a:	69d2      	ldr	r2, [r2, #28]
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	61da      	str	r2, [r3, #28]
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_TIM_PWM_MspInit+0x38>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	2202      	movs	r2, #2
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b004      	add	sp, #16
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	40000400 	.word	0x40000400
 8002a5c:	40021000 	.word	0x40021000

08002a60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM14)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a1e      	ldr	r2, [pc, #120]	; (8002ae8 <HAL_TIM_Base_MspInit+0x88>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d10e      	bne.n	8002a90 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002a72:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <HAL_TIM_Base_MspInit+0x8c>)
 8002a74:	4a1d      	ldr	r2, [pc, #116]	; (8002aec <HAL_TIM_Base_MspInit+0x8c>)
 8002a76:	69d2      	ldr	r2, [r2, #28]
 8002a78:	2180      	movs	r1, #128	; 0x80
 8002a7a:	0049      	lsls	r1, r1, #1
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	61da      	str	r2, [r3, #28]
 8002a80:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <HAL_TIM_Base_MspInit+0x8c>)
 8002a82:	69da      	ldr	r2, [r3, #28]
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4013      	ands	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002a8e:	e026      	b.n	8002ade <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM16)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a16      	ldr	r2, [pc, #88]	; (8002af0 <HAL_TIM_Base_MspInit+0x90>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d10e      	bne.n	8002ab8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002a9a:	4b14      	ldr	r3, [pc, #80]	; (8002aec <HAL_TIM_Base_MspInit+0x8c>)
 8002a9c:	4a13      	ldr	r2, [pc, #76]	; (8002aec <HAL_TIM_Base_MspInit+0x8c>)
 8002a9e:	6992      	ldr	r2, [r2, #24]
 8002aa0:	2180      	movs	r1, #128	; 0x80
 8002aa2:	0289      	lsls	r1, r1, #10
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	619a      	str	r2, [r3, #24]
 8002aa8:	4b10      	ldr	r3, [pc, #64]	; (8002aec <HAL_TIM_Base_MspInit+0x8c>)
 8002aaa:	699a      	ldr	r2, [r3, #24]
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	029b      	lsls	r3, r3, #10
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	693b      	ldr	r3, [r7, #16]
}
 8002ab6:	e012      	b.n	8002ade <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM17)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a0d      	ldr	r2, [pc, #52]	; (8002af4 <HAL_TIM_Base_MspInit+0x94>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d10d      	bne.n	8002ade <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <HAL_TIM_Base_MspInit+0x8c>)
 8002ac4:	4a09      	ldr	r2, [pc, #36]	; (8002aec <HAL_TIM_Base_MspInit+0x8c>)
 8002ac6:	6992      	ldr	r2, [r2, #24]
 8002ac8:	2180      	movs	r1, #128	; 0x80
 8002aca:	02c9      	lsls	r1, r1, #11
 8002acc:	430a      	orrs	r2, r1
 8002ace:	619a      	str	r2, [r3, #24]
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_TIM_Base_MspInit+0x8c>)
 8002ad2:	699a      	ldr	r2, [r3, #24]
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	02db      	lsls	r3, r3, #11
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b006      	add	sp, #24
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	40002000 	.word	0x40002000
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40014400 	.word	0x40014400
 8002af4:	40014800 	.word	0x40014800

08002af8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a43      	ldr	r2, [pc, #268]	; (8002c14 <HAL_TIM_MspPostInit+0x11c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d11b      	bne.n	8002b42 <HAL_TIM_MspPostInit+0x4a>

  /* USER CODE END TIM3_MspPostInit 0 */
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b0a:	230c      	movs	r3, #12
 8002b0c:	18fb      	adds	r3, r7, r3
 8002b0e:	2202      	movs	r2, #2
 8002b10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	230c      	movs	r3, #12
 8002b14:	18fb      	adds	r3, r7, r3
 8002b16:	2202      	movs	r2, #2
 8002b18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	230c      	movs	r3, #12
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	230c      	movs	r3, #12
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	2200      	movs	r2, #0
 8002b28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002b2a:	230c      	movs	r3, #12
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	2201      	movs	r2, #1
 8002b30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b32:	230c      	movs	r3, #12
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	4a38      	ldr	r2, [pc, #224]	; (8002c18 <HAL_TIM_MspPostInit+0x120>)
 8002b38:	0019      	movs	r1, r3
 8002b3a:	0010      	movs	r0, r2
 8002b3c:	f7fd fcb0 	bl	80004a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002b40:	e064      	b.n	8002c0c <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM14)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a35      	ldr	r2, [pc, #212]	; (8002c1c <HAL_TIM_MspPostInit+0x124>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d11c      	bne.n	8002b86 <HAL_TIM_MspPostInit+0x8e>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b4c:	230c      	movs	r3, #12
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	2210      	movs	r2, #16
 8002b52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	230c      	movs	r3, #12
 8002b56:	18fb      	adds	r3, r7, r3
 8002b58:	2202      	movs	r2, #2
 8002b5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	230c      	movs	r3, #12
 8002b5e:	18fb      	adds	r3, r7, r3
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b64:	230c      	movs	r3, #12
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	2200      	movs	r2, #0
 8002b6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8002b6c:	230c      	movs	r3, #12
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	2204      	movs	r2, #4
 8002b72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b74:	230c      	movs	r3, #12
 8002b76:	18fa      	adds	r2, r7, r3
 8002b78:	2390      	movs	r3, #144	; 0x90
 8002b7a:	05db      	lsls	r3, r3, #23
 8002b7c:	0011      	movs	r1, r2
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f7fd fc8e 	bl	80004a0 <HAL_GPIO_Init>
}
 8002b84:	e042      	b.n	8002c0c <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM16)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a25      	ldr	r2, [pc, #148]	; (8002c20 <HAL_TIM_MspPostInit+0x128>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d11c      	bne.n	8002bca <HAL_TIM_MspPostInit+0xd2>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b90:	230c      	movs	r3, #12
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	2240      	movs	r2, #64	; 0x40
 8002b96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	230c      	movs	r3, #12
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	230c      	movs	r3, #12
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba8:	230c      	movs	r3, #12
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	2200      	movs	r2, #0
 8002bae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8002bb0:	230c      	movs	r3, #12
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	2205      	movs	r2, #5
 8002bb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb8:	230c      	movs	r3, #12
 8002bba:	18fa      	adds	r2, r7, r3
 8002bbc:	2390      	movs	r3, #144	; 0x90
 8002bbe:	05db      	lsls	r3, r3, #23
 8002bc0:	0011      	movs	r1, r2
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f7fd fc6c 	bl	80004a0 <HAL_GPIO_Init>
}
 8002bc8:	e020      	b.n	8002c0c <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM17)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <HAL_TIM_MspPostInit+0x12c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d11b      	bne.n	8002c0c <HAL_TIM_MspPostInit+0x114>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bd4:	230c      	movs	r3, #12
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	230c      	movs	r3, #12
 8002bde:	18fb      	adds	r3, r7, r3
 8002be0:	2202      	movs	r2, #2
 8002be2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	230c      	movs	r3, #12
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	2200      	movs	r2, #0
 8002bea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bec:	230c      	movs	r3, #12
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8002bf4:	230c      	movs	r3, #12
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	2205      	movs	r2, #5
 8002bfa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfc:	230c      	movs	r3, #12
 8002bfe:	18fa      	adds	r2, r7, r3
 8002c00:	2390      	movs	r3, #144	; 0x90
 8002c02:	05db      	lsls	r3, r3, #23
 8002c04:	0011      	movs	r1, r2
 8002c06:	0018      	movs	r0, r3
 8002c08:	f7fd fc4a 	bl	80004a0 <HAL_GPIO_Init>
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b008      	add	sp, #32
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40000400 	.word	0x40000400
 8002c18:	48000400 	.word	0x48000400
 8002c1c:	40002000 	.word	0x40002000
 8002c20:	40014400 	.word	0x40014400
 8002c24:	40014800 	.word	0x40014800

08002c28 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a26      	ldr	r2, [pc, #152]	; (8002cd0 <HAL_UART_MspInit+0xa8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d145      	bne.n	8002cc6 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c3a:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <HAL_UART_MspInit+0xac>)
 8002c3c:	4a25      	ldr	r2, [pc, #148]	; (8002cd4 <HAL_UART_MspInit+0xac>)
 8002c3e:	6992      	ldr	r2, [r2, #24]
 8002c40:	2180      	movs	r1, #128	; 0x80
 8002c42:	01c9      	lsls	r1, r1, #7
 8002c44:	430a      	orrs	r2, r1
 8002c46:	619a      	str	r2, [r3, #24]
 8002c48:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <HAL_UART_MspInit+0xac>)
 8002c4a:	699a      	ldr	r2, [r3, #24]
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	01db      	lsls	r3, r3, #7
 8002c50:	4013      	ands	r3, r2
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c56:	230c      	movs	r3, #12
 8002c58:	18fb      	adds	r3, r7, r3
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	230c      	movs	r3, #12
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	2202      	movs	r2, #2
 8002c64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	230c      	movs	r3, #12
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c6e:	230c      	movs	r3, #12
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	2203      	movs	r2, #3
 8002c74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002c76:	230c      	movs	r3, #12
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7e:	230c      	movs	r3, #12
 8002c80:	18fa      	adds	r2, r7, r3
 8002c82:	2390      	movs	r3, #144	; 0x90
 8002c84:	05db      	lsls	r3, r3, #23
 8002c86:	0011      	movs	r1, r2
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7fd fc09 	bl	80004a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c8e:	230c      	movs	r3, #12
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	2208      	movs	r2, #8
 8002c94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c96:	230c      	movs	r3, #12
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c9e:	230c      	movs	r3, #12
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ca6:	230c      	movs	r3, #12
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	2203      	movs	r2, #3
 8002cac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002cae:	230c      	movs	r3, #12
 8002cb0:	18fb      	adds	r3, r7, r3
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb6:	230c      	movs	r3, #12
 8002cb8:	18fa      	adds	r2, r7, r3
 8002cba:	2390      	movs	r3, #144	; 0x90
 8002cbc:	05db      	lsls	r3, r3, #23
 8002cbe:	0011      	movs	r1, r2
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f7fd fbed 	bl	80004a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b008      	add	sp, #32
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	40013800 	.word	0x40013800
 8002cd4:	40021000 	.word	0x40021000

08002cd8 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002cdc:	46c0      	nop			; (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ce6:	e7fe      	b.n	8002ce6 <HardFault_Handler+0x4>

08002ce8 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002cec:	46c0      	nop			; (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d00:	f7fd fabe 	bl	8000280 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002d04:	f7fd fbc0 	bl	8000488 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d08:	46c0      	nop			; (mov r8, r8)
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002d14:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <SystemInit+0x70>)
 8002d16:	4a1a      	ldr	r2, [pc, #104]	; (8002d80 <SystemInit+0x70>)
 8002d18:	6812      	ldr	r2, [r2, #0]
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002d20:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <SystemInit+0x70>)
 8002d22:	4a17      	ldr	r2, [pc, #92]	; (8002d80 <SystemInit+0x70>)
 8002d24:	6852      	ldr	r2, [r2, #4]
 8002d26:	4917      	ldr	r1, [pc, #92]	; (8002d84 <SystemInit+0x74>)
 8002d28:	400a      	ands	r2, r1
 8002d2a:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002d2c:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <SystemInit+0x70>)
 8002d2e:	4a14      	ldr	r2, [pc, #80]	; (8002d80 <SystemInit+0x70>)
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	4915      	ldr	r1, [pc, #84]	; (8002d88 <SystemInit+0x78>)
 8002d34:	400a      	ands	r2, r1
 8002d36:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <SystemInit+0x70>)
 8002d3a:	4a11      	ldr	r2, [pc, #68]	; (8002d80 <SystemInit+0x70>)
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	4913      	ldr	r1, [pc, #76]	; (8002d8c <SystemInit+0x7c>)
 8002d40:	400a      	ands	r2, r1
 8002d42:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002d44:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <SystemInit+0x70>)
 8002d46:	4a0e      	ldr	r2, [pc, #56]	; (8002d80 <SystemInit+0x70>)
 8002d48:	6852      	ldr	r2, [r2, #4]
 8002d4a:	4911      	ldr	r1, [pc, #68]	; (8002d90 <SystemInit+0x80>)
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <SystemInit+0x70>)
 8002d52:	4a0b      	ldr	r2, [pc, #44]	; (8002d80 <SystemInit+0x70>)
 8002d54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d56:	210f      	movs	r1, #15
 8002d58:	438a      	bics	r2, r1
 8002d5a:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <SystemInit+0x70>)
 8002d5e:	4a08      	ldr	r2, [pc, #32]	; (8002d80 <SystemInit+0x70>)
 8002d60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d62:	490c      	ldr	r1, [pc, #48]	; (8002d94 <SystemInit+0x84>)
 8002d64:	400a      	ands	r2, r1
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <SystemInit+0x70>)
 8002d6a:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <SystemInit+0x70>)
 8002d6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d6e:	2101      	movs	r1, #1
 8002d70:	438a      	bics	r2, r1
 8002d72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002d74:	4b02      	ldr	r3, [pc, #8]	; (8002d80 <SystemInit+0x70>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]

}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	08ffb80c 	.word	0x08ffb80c
 8002d88:	fef6ffff 	.word	0xfef6ffff
 8002d8c:	fffbffff 	.word	0xfffbffff
 8002d90:	ffc0ffff 	.word	0xffc0ffff
 8002d94:	fffffeec 	.word	0xfffffeec

08002d98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d98:	480d      	ldr	r0, [pc, #52]	; (8002dd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d9a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d9c:	480d      	ldr	r0, [pc, #52]	; (8002dd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d9e:	490e      	ldr	r1, [pc, #56]	; (8002dd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002da0:	4a0e      	ldr	r2, [pc, #56]	; (8002ddc <LoopForever+0xe>)
  movs r3, #0
 8002da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da4:	e002      	b.n	8002dac <LoopCopyDataInit>

08002da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002daa:	3304      	adds	r3, #4

08002dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db0:	d3f9      	bcc.n	8002da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002db2:	4a0b      	ldr	r2, [pc, #44]	; (8002de0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002db4:	4c0b      	ldr	r4, [pc, #44]	; (8002de4 <LoopForever+0x16>)
  movs r3, #0
 8002db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db8:	e001      	b.n	8002dbe <LoopFillZerobss>

08002dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dbc:	3204      	adds	r2, #4

08002dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc0:	d3fb      	bcc.n	8002dba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002dc2:	f7ff ffa5 	bl	8002d10 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002dc6:	f000 f811 	bl	8002dec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dca:	f7ff fa1d 	bl	8002208 <main>

08002dce <LoopForever>:

LoopForever:
    b LoopForever
 8002dce:	e7fe      	b.n	8002dce <LoopForever>
  ldr   r0, =_estack
 8002dd0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dd8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002ddc:	08002ec8 	.word	0x08002ec8
  ldr r2, =_sbss
 8002de0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002de4:	20000194 	.word	0x20000194

08002de8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002de8:	e7fe      	b.n	8002de8 <ADC1_IRQHandler>
	...

08002dec <__libc_init_array>:
 8002dec:	b570      	push	{r4, r5, r6, lr}
 8002dee:	2600      	movs	r6, #0
 8002df0:	4d0c      	ldr	r5, [pc, #48]	; (8002e24 <__libc_init_array+0x38>)
 8002df2:	4c0d      	ldr	r4, [pc, #52]	; (8002e28 <__libc_init_array+0x3c>)
 8002df4:	1b64      	subs	r4, r4, r5
 8002df6:	10a4      	asrs	r4, r4, #2
 8002df8:	42a6      	cmp	r6, r4
 8002dfa:	d109      	bne.n	8002e10 <__libc_init_array+0x24>
 8002dfc:	2600      	movs	r6, #0
 8002dfe:	f000 f819 	bl	8002e34 <_init>
 8002e02:	4d0a      	ldr	r5, [pc, #40]	; (8002e2c <__libc_init_array+0x40>)
 8002e04:	4c0a      	ldr	r4, [pc, #40]	; (8002e30 <__libc_init_array+0x44>)
 8002e06:	1b64      	subs	r4, r4, r5
 8002e08:	10a4      	asrs	r4, r4, #2
 8002e0a:	42a6      	cmp	r6, r4
 8002e0c:	d105      	bne.n	8002e1a <__libc_init_array+0x2e>
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
 8002e10:	00b3      	lsls	r3, r6, #2
 8002e12:	58eb      	ldr	r3, [r5, r3]
 8002e14:	4798      	blx	r3
 8002e16:	3601      	adds	r6, #1
 8002e18:	e7ee      	b.n	8002df8 <__libc_init_array+0xc>
 8002e1a:	00b3      	lsls	r3, r6, #2
 8002e1c:	58eb      	ldr	r3, [r5, r3]
 8002e1e:	4798      	blx	r3
 8002e20:	3601      	adds	r6, #1
 8002e22:	e7f2      	b.n	8002e0a <__libc_init_array+0x1e>
 8002e24:	08002ec0 	.word	0x08002ec0
 8002e28:	08002ec0 	.word	0x08002ec0
 8002e2c:	08002ec0 	.word	0x08002ec0
 8002e30:	08002ec4 	.word	0x08002ec4

08002e34 <_init>:
 8002e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3a:	bc08      	pop	{r3}
 8002e3c:	469e      	mov	lr, r3
 8002e3e:	4770      	bx	lr

08002e40 <_fini>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e46:	bc08      	pop	{r3}
 8002e48:	469e      	mov	lr, r3
 8002e4a:	4770      	bx	lr
